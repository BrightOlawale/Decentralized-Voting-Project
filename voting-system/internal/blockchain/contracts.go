// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package blockchain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SecureVotingSystemMetaData contains all meta data concerning the SecureVotingSystem contract.
var SecureVotingSystemMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"candidateId\",\"type\":\"string\"}],\"name\":\"CandidateRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ElectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ElectionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ElectionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"pollingUnitId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PollingUnitRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"terminal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"TerminalAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"verificationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"pollingUnitId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteInvalidated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedTerminals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"currentElectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"electionResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pollingUnits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVoters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesRecorded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verificationHashToVoteId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"verificationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVote\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pollingUnitId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"candidateId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_candidates\",\"type\":\"string[]\"}],\"name\":\"createElection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_candidateId\",\"type\":\"string\"}],\"name\":\"registerCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_candidateIds\",\"type\":\"string[]\"}],\"name\":\"registerCandidates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_verificationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_encryptedVote\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_pollingUnitId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_candidateId\",\"type\":\"string\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_verificationHash\",\"type\":\"bytes32\"}],\"name\":\"hasVoterVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pollingUnitId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalVoters\",\"type\":\"uint256\"}],\"name\":\"registerPollingUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terminal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"authorizeTerminal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"isTerminalAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVoteDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"verificationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVote\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pollingUnitId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"getElectionDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"candidates\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_candidateId\",\"type\":\"string\"}],\"name\":\"getElectionResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"getElectionCandidateResults\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"candidateIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteCounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"getCurrentElectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"getTotalElections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pollingUnitId\",\"type\":\"string\"}],\"name\":\"getPollingUnitVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"invalidateVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"getVotesByTimeRange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"getElectionStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invalidVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001d3362000077565b600180805533600081815260086020908152604091829020805460ff191685179055905192835290917f1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0910160405180910390a2620000c7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6135bc80620000d76000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806373ed31a31161011a578063d1009367116100ad578063f2fde38b1161007c578063f2fde38b1461050d578063f42afb9014610520578063f604992414610533578063f67c7d0614610558578063fe2b536b1461056b57600080fd5b8063d100936714610497578063d293eb3b146104aa578063e744cf91146104bd578063e8b20ad7146104d057600080fd5b80639a0e7d66116100e95780639a0e7d6614610451578063a9392e0c14610459578063bc27904714610461578063c91d60ed1461047457600080fd5b806373ed31a3146103d15780638da5cb5b1461040d5780638dc419111461042857806398ecf2a01461044857600080fd5b806354a1b431116101925780636d32dc4b116101615780636d32dc4b14610375578063710f750c14610388578063715018a6146103a957806373b93c34146103b157600080fd5b806354a1b431146102fd57806359f78468146103225780635df813301461032a5780635e6fef011461035057600080fd5b8063374904b2116101ce578063374904b21461029a5780634596aee8146102bf5780634ba7945f146102e257806351858e27146102f557600080fd5b806310fc46b314610200578063184acbab146102155780631b4613cb146102565780631cfc71e614610279575b600080fd5b61021361020e366004612b54565b610573565b005b610241610223366004612bb6565b6001600160a01b031660009081526008602052604090205460ff1690565b60405190151581526020015b60405180910390f35b610241610264366004612bd8565b60046020526000908152604090205460ff1681565b61028c610287366004612bd8565b61099b565b60405161024d929190612cd4565b6102ad6102a8366004612d02565b610bb7565b60405161024d96959493929190612d3e565b6102416102cd366004612bb6565b60086020526000908152604090205460ff1681565b6102136102f0366004612e36565b610d93565b610213611005565b61031061030b366004612bd8565b611034565b60405161024d96959493929190612e72565b610213611249565b61033d610338366004612bd8565b611327565b60405161024d9796959493929190612eb1565b61036361035e366004612bd8565b611477565b60405161024d96959493929190612f05565b610213610383366004612bd8565b61153b565b61039b610396366004612f43565b611775565b60405190815260200161024d565b610213611cb7565b6103c46103bf366004612fb9565b611cc9565b60405161024d9190612fdb565b61039b6103df366004612b54565b600a602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b6000546040516001600160a01b03909116815260200161024d565b61039b610436366004612bd8565b60066020526000908152604090205481565b61039b600b5481565b61039b611e97565b61039b611ea7565b61039b61046f366004612fee565b611eb2565b610241610482366004612bd8565b60009081526004602052604090205460ff1690565b6102136104a5366004612b54565b61209a565b61039b6104b8366004612d02565b612270565b6102136104cb366004613058565b61229b565b6104e36104de366004612bd8565b612360565b6040805195865260208601949094529284019190915260608301521515608082015260a00161024d565b61021361051b366004612bb6565b612466565b61021361052e366004613094565b6124df565b610546610541366004612bd8565b6126c7565b60405161024d96959493929190613123565b61039b610566366004612b54565b6128ac565b600b5461039b565b61057b6128df565b60008211801561058d57506002548211155b6105de5760405162461bcd60e51b815260206004820152601d60248201527f566f74696e6753797374656d3a20496e76616c696420766f746520494400000060448201526064015b60405180910390fd5b60008281526005602052604090206006015460ff1661064a5760405162461bcd60e51b815260206004820152602260248201527f566f74696e6753797374656d3a20566f746520616c726561647920696e76616c6044820152611a5960f21b60648201526084016105d5565b600082815260056020908152604080832060068101805460ff19169055815160e081018352815481526001820154938101939093526002810154918301919091526003810180546060840191906106a090613170565b80601f01602080910402602001604051908101604052809291908181526020018280546106cc90613170565b80156107195780601f106106ee57610100808354040283529160200191610719565b820191906000526020600020905b8154815290600101906020018083116106fc57829003601f168201915b505050505081526020016004820154815260200160058201805461073c90613170565b80601f016020809104026020016040519081016040528092919081815260200182805461076890613170565b80156107b55780601f1061078a576101008083540402835291602001916107b5565b820191906000526020600020905b81548152906001019060200180831161079857829003601f168201915b50505091835250506006919091015460ff161515602091820152608082015160009081526007918290526040902090810154919250901561080857600781018054906000610802836131c0565b91905055505b60006009836060015160405161081e91906131d7565b9081526020016040518091039020600401541115610870576009826060015160405161084a91906131d7565b908152604051908190036020019020600401805490600061086a836131c0565b91905055505b6000816006018360a0015160405161088891906131d7565b90815260200160405180910390205411156108d657806006018260a001516040516108b391906131d7565b90815260405190819003602001902080549060006108d0836131c0565b91905055505b60808201516000908152600a602052604080822060a0850151915190916108fc916131d7565b908152602001604051809103902054111561095d57600a6000836080015181526020019081526020016000208260a0015160405161093a91906131d7565b9081526040519081900360200190208054906000610957836131c0565b91905055505b837f135777869117aa60ca380541543f5506294b4330cef23c24067a9bd0bb1f0ff48460405161098d91906131f3565b60405180910390a250505050565b6060806000831180156109b057506003548311155b6109cc5760405162461bcd60e51b81526004016105d590613206565b600083815260076020526040812060058101549091816001600160401b038111156109f9576109f9612a9f565b604051908082528060200260200182016040528015610a2c57816020015b6060815260200190600190039081610a175790505b5090506000826001600160401b03811115610a4957610a49612a9f565b604051908082528060200260200182016040528015610a72578160200160208202803683370190505b50905060005b83811015610baa576000856005018281548110610a9757610a97613247565b906000526020600020018054610aac90613170565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad890613170565b8015610b255780601f10610afa57610100808354040283529160200191610b25565b820191906000526020600020905b815481529060010190602001808311610b0857829003601f168201915b5050505050905080848381518110610b3f57610b3f613247565b6020026020010181905250600a60008a815260200190815260200160002081604051610b6b91906131d7565b908152602001604051809103902054838381518110610b8c57610b8c613247565b60209081029190910101525080610ba28161325d565b915050610a78565b5090969095509350505050565b8051602081830181018051600982529282019190930120915280548190610bdd90613170565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0990613170565b8015610c565780601f10610c2b57610100808354040283529160200191610c56565b820191906000526020600020905b815481529060010190602001808311610c3957829003601f168201915b505050505090806001018054610c6b90613170565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9790613170565b8015610ce45780601f10610cb957610100808354040283529160200191610ce4565b820191906000526020600020905b815481529060010190602001808311610cc757829003601f168201915b505050505090806002018054610cf990613170565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2590613170565b8015610d725780601f10610d4757610100808354040283529160200191610d72565b820191906000526020600020905b815481529060010190602001808311610d5557829003601f168201915b50505050600383015460048401546005909401549293909290915060ff1686565b610d9b6128df565b6000828152600760205260409020600481015483919060ff1615610dd15760405162461bcd60e51b81526004016105d590613276565b80600201544210610df45760405162461bcd60e51b81526004016105d5906132bb565b600084118015610e0657506003548411155b610e225760405162461bcd60e51b81526004016105d590613206565b6000835111610e7f5760405162461bcd60e51b8152602060048201526024808201527f566f74696e6753797374656d3a204e6f2063616e646964617465732070726f766044820152631a59195960e21b60648201526084016105d5565b6000848152600760205260408120905b8451811015610ffd576000858281518110610eac57610eac613247565b602002602001015190506000815111610ed75760405162461bcd60e51b81526004016105d590613301565b6000805b6005850154811015610f43578280519060200120856005018281548110610f0457610f04613247565b90600052602060002001604051610f1b9190613343565b604051809103902003610f315760019150610f43565b80610f3b8161325d565b915050610edb565b508015610f625760405162461bcd60e51b81526004016105d5906133b9565b6005840180546001810182556000918252602090912001610f83838261344e565b5060008460060183604051610f9891906131d7565b90815260405190819003602001812091909155610fb69083906131d7565b6040519081900381209089907f96b6e1d9af8279de0ae4d01600bcae708bdb292c4a8f8f150aff92f5caf56a4290600090a350508080610ff59061325d565b915050610e8f565b505050505050565b61100d6128df565b600b541561103257600b546000908152600760205260409020600401805460ff191690555b565b6000806000606060008060008711801561105057506002548711155b61109c5760405162461bcd60e51b815260206004820152601d60248201527f566f74696e6753797374656d3a20496e76616c696420766f746520494400000060448201526064016105d5565b6000600560008981526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820180546110ea90613170565b80601f016020809104026020016040519081016040528092919081815260200182805461111690613170565b80156111635780601f1061113857610100808354040283529160200191611163565b820191906000526020600020905b81548152906001019060200180831161114657829003601f168201915b505050505081526020016004820154815260200160058201805461118690613170565b80601f01602080910402602001604051908101604052809291908181526020018280546111b290613170565b80156111ff5780601f106111d4576101008083540402835291602001916111ff565b820191906000526020600020905b8154815290600101906020018083116111e257829003601f168201915b50505091835250506006919091015460ff16151560209182015281519082015160408301516060840151608085015160c090950151939d929c50909a509850919650945092505050565b6112516128df565b6000600b54116112a35760405162461bcd60e51b815260206004820181905260248201527f566f74696e6753797374656d3a204e6f2061637469766520656c656374696f6e60448201526064016105d5565b600b546000908152600760205260409020600481015460ff166112d85760405162461bcd60e51b81526004016105d59061350d565b60048101805460ff19169055600b8054600090915560405142815281907f32e2c12037f9600b91a766ce53eab6909f3bdb865851cd9a8c7fafbdf249a9ce906020015b60405180910390a25050565b60056020526000908152604090208054600182015460028301546003840180549394929391929161135790613170565b80601f016020809104026020016040519081016040528092919081815260200182805461138390613170565b80156113d05780601f106113a5576101008083540402835291602001916113d0565b820191906000526020600020905b8154815290600101906020018083116113b357829003601f168201915b5050505050908060040154908060050180546113eb90613170565b80601f016020809104026020016040519081016040528092919081815260200182805461141790613170565b80156114645780601f1061143957610100808354040283529160200191611464565b820191906000526020600020905b81548152906001019060200180831161144757829003601f168201915b5050506006909301549192505060ff1687565b6007602052600090815260409020805460018201805491929161149990613170565b80601f01602080910402602001604051908101604052809291908181526020018280546114c590613170565b80156115125780601f106114e757610100808354040283529160200191611512565b820191906000526020600020905b8154815290600101906020018083116114f557829003601f168201915b5050506002840154600385015460048601546007909601549495919490935060ff909116915086565b6115436128df565b60008111801561155557506003548111155b6115715760405162461bcd60e51b81526004016105d590613206565b600b54156115d25760405162461bcd60e51b815260206004820152602860248201527f566f74696e6753797374656d3a20416e6f7468657220656c656374696f6e2069604482015267732061637469766560c01b60648201526084016105d5565b6000818152600760205260409020600481015460ff16156116055760405162461bcd60e51b81526004016105d5906132bb565b806002015442101561166f5760405162461bcd60e51b815260206004820152602d60248201527f566f74696e6753797374656d3a20456c656374696f6e2073746172742074696d60448201526c19481b9bdd081c995858da1959609a1b60648201526084016105d5565b806003015442106116cd5760405162461bcd60e51b815260206004820152602260248201527f566f74696e6753797374656d3a20456c656374696f6e20686173206578706972604482015261195960f21b60648201526084016105d5565b600581015461172d5760405162461bcd60e51b815260206004820152602660248201527f566f74696e6753797374656d3a204e6f2063616e6469646174657320636f6e666044820152651a59dd5c995960d21b60648201526084016105d5565b60048101805460ff19166001179055600b82905560405182907fff6a30dd22f5e8b783044c7d895a6e8592b55c56f139978d44dc39daf596731f9061131b9042815260200190565b3360009081526008602052604081205460ff166117e05760405162461bcd60e51b815260206004820152602360248201527f566f74696e6753797374656d3a20556e617574686f72697a6564207465726d696044820152621b985b60ea1b60648201526084016105d5565b6000600b54116118325760405162461bcd60e51b815260206004820181905260248201527f566f74696e6753797374656d3a204e6f2061637469766520656c656374696f6e60448201526064016105d5565b600b546000908152600760205260409020600481015460ff166118675760405162461bcd60e51b81526004016105d59061350d565b8060020154421015801561187f575080600301544211155b6118d95760405162461bcd60e51b815260206004820152602560248201527f566f74696e6753797374656d3a20456c656374696f6e206e6f7420696e20736560448201526439b9b4b7b760d91b60648201526084016105d5565b836009816040516118ea91906131d7565b9081526040519081900360200190206005015460ff166119575760405162461bcd60e51b815260206004820152602260248201527f566f74696e6753797374656d3a20496e76616c696420706f6c6c696e6720756e6044820152611a5d60f21b60648201526084016105d5565b61195f612939565b60008781526004602052604090205460ff16156119d25760405162461bcd60e51b815260206004820152602b60248201527f566f74696e6753797374656d3a20566f7465722068617320616c72656164792060448201526a63617374206120766f746560a81b60648201526084016105d5565b600b54600090815260076020526040812090805b6005830154811015611a4e578680519060200120836005018281548110611a0f57611a0f613247565b90600052602060002001604051611a269190613343565b604051809103902003611a3c5760019150611a4e565b80611a468161325d565b9150506119e6565b5080611a9c5760405162461bcd60e51b815260206004820152601f60248201527f566f74696e6753797374656d3a20496e76616c69642063616e6469646174650060448201526064016105d5565b6000898152600460205260409020805460ff19166001179055611ac3600280546001019055565b6000611ace60025490565b6040805160e0810182528c815260208082018d815242838501908152606084018e8152600b54608086015260a085018e9052600160c086018190526000888152600590955295909320845181559151948201949094559251600284015551929350916003820190611b3f908261344e565b506080820151600482015560a08201516005820190611b5e908261344e565b5060c091909101516006918201805460ff191691151591909117905560008b815260208290526040908190208390555190840190611b9d9089906131d7565b9081526040519081900360200190208054906000611bba8361325d565b9091555050600783018054906000611bd18361325d565b9091555050600b546000908152600a6020526040908190209051611bf69089906131d7565b9081526040519081900360200190208054906000611c138361325d565b9190505550600988604051611c2891906131d7565b9081526040519081900360200190206004018054906000611c488361325d565b9190505550600b5488604051611c5e91906131d7565b6040805191829003822042835260208301859052918d917fdf9dbd71c12ac0ec889f1cad7d0e15a26cc5765f926d01d606c0eb683a161d7d910160405180910390a494505050611cad60018055565b5050949350505050565b611cbf6128df565b6110326000612992565b606082821015611d1b5760405162461bcd60e51b815260206004820181905260248201527f566f74696e6753797374656d3a20496e76616c69642074696d652072616e676560448201526064016105d5565b6000611d2660025490565b90506000816001600160401b03811115611d4257611d42612a9f565b604051908082528060200260200182016040528015611d6b578160200160208202803683370190505b509050600060015b838111611def576000818152600560205260409020600201548711801590611dac57506000818152600560205260409020600201548610155b15611ddd5780838381518110611dc457611dc4613247565b602090810291909101015281611dd98161325d565b9250505b80611de78161325d565b915050611d73565b506000816001600160401b03811115611e0a57611e0a612a9f565b604051908082528060200260200182016040528015611e33578160200160208202803683370190505b50905060005b82811015611e8a57838181518110611e5357611e53613247565b6020026020010151828281518110611e6d57611e6d613247565b602090810291909101015280611e828161325d565b915050611e39565b5093505050505b92915050565b6000611ea260025490565b905090565b6000611ea260035490565b6000611ebc6128df565b428411611f1e5760405162461bcd60e51b815260206004820152602a60248201527f566f74696e6753797374656d3a2053746172742074696d65206d75737420626560448201526920696e2066757475726560b01b60648201526084016105d5565b838311611f855760405162461bcd60e51b815260206004820152602f60248201527f566f74696e6753797374656d3a20456e642074696d65206d757374206265206160448201526e667465722073746172742074696d6560881b60648201526084016105d5565b611f93600380546001019055565b6000611f9e60035490565b600081815260076020526040902081815590915060018101611fc0888261344e565b50600281018690556003810185905560048101805460ff191690558351611ff090600583019060208701906129e2565b506000600782018190555b84518110156120535760008260060186838151811061201c5761201c613247565b602002602001015160405161203191906131d7565b908152604051908190036020019020558061204b8161325d565b915050611ffb565b50817fe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d98888886040516120889392919061354e565b60405180910390a25095945050505050565b6120a26128df565b6000828152600760205260409020600481015483919060ff16156120d85760405162461bcd60e51b81526004016105d590613276565b806002015442106120fb5760405162461bcd60e51b81526004016105d5906132bb565b60008411801561210d57506003548411155b6121295760405162461bcd60e51b81526004016105d590613206565b600083511161214a5760405162461bcd60e51b81526004016105d590613301565b600084815260076020526040812090805b60058301548110156121c357858051906020012083600501828154811061218457612184613247565b9060005260206000200160405161219b9190613343565b6040518091039020036121b157600191506121c3565b806121bb8161325d565b91505061215b565b5080156121e25760405162461bcd60e51b81526004016105d5906133b9565b6005820180546001810182556000918252602090912001612203868261344e565b506000826006018660405161221891906131d7565b908152604051908190036020018120919091556122369086906131d7565b6040519081900381209087907f96b6e1d9af8279de0ae4d01600bcae708bdb292c4a8f8f150aff92f5caf56a4290600090a3505050505050565b600060098260405161228291906131d7565b9081526020016040518091039020600401549050919050565b6122a36128df565b6001600160a01b0382166123085760405162461bcd60e51b815260206004820152602660248201527f566f74696e6753797374656d3a20496e76616c6964207465726d696e616c206160448201526564647265737360d01b60648201526084016105d5565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527f1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0910161131b565b6000806000806000808611801561237957506003548611155b6123955760405162461bcd60e51b81526004016105d590613206565b600086815260076020819052604082209081015490918060015b600254811161241d576000818152600560205260409020600401548b900361240b5760008181526005602052604090206006015460ff16156123fd57826123f58161325d565b93505061240b565b816124078161325d565b9250505b806124158161325d565b9150506123af565b506000846002015485600301546124349190613573565b600486015490915060009060ff161580156124525750856003015442115b949c939b5091995097509195509350505050565b61246e6128df565b6001600160a01b0381166124d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d5565b6124dc81612992565b50565b6124e76128df565b60008451116125465760405162461bcd60e51b815260206004820152602560248201527f566f74696e6753797374656d3a20496e76616c696420706f6c6c696e6720756e6044820152641a5d08125160da1b60648201526084016105d5565b60098460405161255691906131d7565b9081526040519081900360200190206005015460ff16156125cb5760405162461bcd60e51b815260206004820152602960248201527f566f74696e6753797374656d3a20506f6c6c696e6720756e697420616c72656160448201526864792065786973747360b81b60648201526084016105d5565b6040518060c00160405280858152602001848152602001838152602001828152602001600081526020016001151581525060098560405161260c91906131d7565b90815260405190819003602001902081518190612629908261344e565b506020820151600182019061263e908261344e565b5060408201516002820190612653908261344e565b50606082015160038201556080820151600482015560a0909101516005909101805460ff19169115159190911790556040516126909085906131d7565b60405180910390207fb4fbf858aaf58f916976b6c4668154c1e069b7abc44972f310db304359cf28ce8460405161098d91906131f3565b606060008060006060600080871180156126e357506003548711155b6126ff5760405162461bcd60e51b81526004016105d590613206565b6000878152600760208190526040909120600281015460038201546004830154938301546001840180549495909460ff909116916005870191869061274390613170565b80601f016020809104026020016040519081016040528092919081815260200182805461276f90613170565b80156127bc5780601f10612791576101008083540402835291602001916127bc565b820191906000526020600020905b81548152906001019060200180831161279f57829003601f168201915b5050505050955081805480602002602001604051908101604052809291908181526020016000905b8282101561289057838290600052602060002001805461280390613170565b80601f016020809104026020016040519081016040528092919081815260200182805461282f90613170565b801561287c5780601f106128515761010080835404028352916020019161287c565b820191906000526020600020905b81548152906001019060200180831161285f57829003601f168201915b5050505050815260200190600101906127e4565b5050505091509650965096509650965096505091939550919395565b6000828152600a602052604080822090516128c89084906131d7565b908152602001604051809103902054905092915050565b6000546001600160a01b031633146110325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d5565b60026001540361298b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105d5565b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215612a28579160200282015b82811115612a285782518290612a18908261344e565b5091602001919060010190612a02565b50612a34929150612a38565b5090565b80821115612a34576000612a4c8282612a55565b50600101612a38565b508054612a6190613170565b6000825580601f10612a71575050565b601f0160209004906000526020600020908101906124dc91905b80821115612a345760008155600101612a8b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612add57612add612a9f565b604052919050565b600082601f830112612af657600080fd5b81356001600160401b03811115612b0f57612b0f612a9f565b612b22601f8201601f1916602001612ab5565b818152846020838601011115612b3757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612b6757600080fd5b8235915060208301356001600160401b03811115612b8457600080fd5b612b9085828601612ae5565b9150509250929050565b80356001600160a01b0381168114612bb157600080fd5b919050565b600060208284031215612bc857600080fd5b612bd182612b9a565b9392505050565b600060208284031215612bea57600080fd5b5035919050565b60005b83811015612c0c578181015183820152602001612bf4565b50506000910152565b60008151808452612c2d816020860160208601612bf1565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015612c8c57601f19868403018952612c7a838351612c15565b98840198925090830190600101612c5e565b5090979650505050505050565b600081518084526020808501945080840160005b83811015612cc957815187529582019590820190600101612cad565b509495945050505050565b604081526000612ce76040830185612c41565b8281036020840152612cf98185612c99565b95945050505050565b600060208284031215612d1457600080fd5b81356001600160401b03811115612d2a57600080fd5b612d3684828501612ae5565b949350505050565b60c081526000612d5160c0830189612c15565b8281036020840152612d638189612c15565b90508281036040840152612d778188612c15565b606084019690965250506080810192909252151560a0909101529392505050565b600082601f830112612da957600080fd5b813560206001600160401b0380831115612dc557612dc5612a9f565b8260051b612dd4838201612ab5565b9384528581018301938381019088861115612dee57600080fd5b84880192505b85831015612e2a57823584811115612e0c5760008081fd5b612e1a8a87838c0101612ae5565b8352509184019190840190612df4565b98975050505050505050565b60008060408385031215612e4957600080fd5b8235915060208301356001600160401b03811115612e6657600080fd5b612b9085828601612d98565b86815285602082015284604082015260c060608201526000612e9760c0830186612c15565b60808301949094525090151560a090910152949350505050565b87815286602082015285604082015260e060608201526000612ed660e0830187612c15565b85608084015282810360a0840152612eee8186612c15565b91505082151560c083015298975050505050505050565b86815260c060208201526000612f1e60c0830188612c15565b6040830196909652506060810193909352901515608083015260a09091015292915050565b60008060008060808587031215612f5957600080fd5b843593506020850135925060408501356001600160401b0380821115612f7e57600080fd5b612f8a88838901612ae5565b93506060870135915080821115612fa057600080fd5b50612fad87828801612ae5565b91505092959194509250565b60008060408385031215612fcc57600080fd5b50508035926020909101359150565b602081526000612bd16020830184612c99565b6000806000806080858703121561300457600080fd5b84356001600160401b038082111561301b57600080fd5b61302788838901612ae5565b95506020870135945060408701359350606087013591508082111561304b57600080fd5b50612fad87828801612d98565b6000806040838503121561306b57600080fd5b61307483612b9a565b91506020830135801515811461308957600080fd5b809150509250929050565b600080600080608085870312156130aa57600080fd5b84356001600160401b03808211156130c157600080fd5b6130cd88838901612ae5565b955060208701359150808211156130e357600080fd5b6130ef88838901612ae5565b9450604087013591508082111561310557600080fd5b5061311287828801612ae5565b949793965093946060013593505050565b60c08152600061313660c0830189612c15565b8760208401528660408401528515156060840152828103608084015261315c8186612c41565b9150508260a0830152979650505050505050565b600181811c9082168061318457607f821691505b6020821081036131a457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000816131cf576131cf6131aa565b506000190190565b600082516131e9818460208701612bf1565b9190910192915050565b602081526000612bd16020830184612c15565b60208082526021908201527f566f74696e6753797374656d3a20496e76616c696420656c656374696f6e20496040820152601160fa1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161326f5761326f6131aa565b5060010190565b60208082526025908201527f566f74696e6753797374656d3a20456c656374696f6e20616c72656164792061604082015264637469766560d81b606082015260800190565b60208082526026908201527f566f74696e6753797374656d3a20456c656374696f6e20616c726561647920736040820152651d185c9d195960d21b606082015260800190565b60208082526022908201527f566f74696e6753797374656d3a20496e76616c69642063616e64696461746520604082015261125160f21b606082015260800190565b600080835461335181613170565b60018281168015613369576001811461337e576133ad565b60ff19841687528215158302870194506133ad565b8760005260208060002060005b858110156133a45781548a82015290840190820161338b565b50505082870194505b50929695505050505050565b6020808252602a908201527f566f74696e6753797374656d3a2043616e64696461746520616c7265616479206040820152691c9959da5cdd195c995960b21b606082015260800190565b601f82111561344957600081815260208120601f850160051c8101602086101561342a5750805b601f850160051c820191505b81811015610ffd57828155600101613436565b505050565b81516001600160401b0381111561346757613467612a9f565b61347b816134758454613170565b84613403565b602080601f8311600181146134b057600084156134985750858301515b600019600386901b1c1916600185901b178555610ffd565b600085815260208120601f198616915b828110156134df578886015182559484019460019091019084016134c0565b50858210156134fd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526021908201527f566f74696e6753797374656d3a20456c656374696f6e206e6f742061637469766040820152606560f81b606082015260800190565b6060815260006135616060830186612c15565b60208301949094525060400152919050565b81810381811115611e9157611e916131aa56fea2646970667358221220e84335711b90fb1d32f6f37c81f4f3854cf13ef30a717e1c9ed652fa0b7cada264736f6c63430008130033",
}

// SecureVotingSystemABI is the input ABI used to generate the binding from.
// Deprecated: Use SecureVotingSystemMetaData.ABI instead.
var SecureVotingSystemABI = SecureVotingSystemMetaData.ABI

// SecureVotingSystemBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SecureVotingSystemMetaData.Bin instead.
var SecureVotingSystemBin = SecureVotingSystemMetaData.Bin

// DeploySecureVotingSystem deploys a new Ethereum contract, binding an instance of SecureVotingSystem to it.
func DeploySecureVotingSystem(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SecureVotingSystem, error) {
	parsed, err := SecureVotingSystemMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SecureVotingSystemBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SecureVotingSystem{SecureVotingSystemCaller: SecureVotingSystemCaller{contract: contract}, SecureVotingSystemTransactor: SecureVotingSystemTransactor{contract: contract}, SecureVotingSystemFilterer: SecureVotingSystemFilterer{contract: contract}}, nil
}

// SecureVotingSystem is an auto generated Go binding around an Ethereum contract.
type SecureVotingSystem struct {
	SecureVotingSystemCaller     // Read-only binding to the contract
	SecureVotingSystemTransactor // Write-only binding to the contract
	SecureVotingSystemFilterer   // Log filterer for contract events
}

// SecureVotingSystemCaller is an auto generated read-only Go binding around an Ethereum contract.
type SecureVotingSystemCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecureVotingSystemTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SecureVotingSystemTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecureVotingSystemFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SecureVotingSystemFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecureVotingSystemSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SecureVotingSystemSession struct {
	Contract     *SecureVotingSystem // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SecureVotingSystemCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SecureVotingSystemCallerSession struct {
	Contract *SecureVotingSystemCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// SecureVotingSystemTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SecureVotingSystemTransactorSession struct {
	Contract     *SecureVotingSystemTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// SecureVotingSystemRaw is an auto generated low-level Go binding around an Ethereum contract.
type SecureVotingSystemRaw struct {
	Contract *SecureVotingSystem // Generic contract binding to access the raw methods on
}

// SecureVotingSystemCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SecureVotingSystemCallerRaw struct {
	Contract *SecureVotingSystemCaller // Generic read-only contract binding to access the raw methods on
}

// SecureVotingSystemTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SecureVotingSystemTransactorRaw struct {
	Contract *SecureVotingSystemTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSecureVotingSystem creates a new instance of SecureVotingSystem, bound to a specific deployed contract.
func NewSecureVotingSystem(address common.Address, backend bind.ContractBackend) (*SecureVotingSystem, error) {
	contract, err := bindSecureVotingSystem(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystem{SecureVotingSystemCaller: SecureVotingSystemCaller{contract: contract}, SecureVotingSystemTransactor: SecureVotingSystemTransactor{contract: contract}, SecureVotingSystemFilterer: SecureVotingSystemFilterer{contract: contract}}, nil
}

// NewSecureVotingSystemCaller creates a new read-only instance of SecureVotingSystem, bound to a specific deployed contract.
func NewSecureVotingSystemCaller(address common.Address, caller bind.ContractCaller) (*SecureVotingSystemCaller, error) {
	contract, err := bindSecureVotingSystem(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemCaller{contract: contract}, nil
}

// NewSecureVotingSystemTransactor creates a new write-only instance of SecureVotingSystem, bound to a specific deployed contract.
func NewSecureVotingSystemTransactor(address common.Address, transactor bind.ContractTransactor) (*SecureVotingSystemTransactor, error) {
	contract, err := bindSecureVotingSystem(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemTransactor{contract: contract}, nil
}

// NewSecureVotingSystemFilterer creates a new log filterer instance of SecureVotingSystem, bound to a specific deployed contract.
func NewSecureVotingSystemFilterer(address common.Address, filterer bind.ContractFilterer) (*SecureVotingSystemFilterer, error) {
	contract, err := bindSecureVotingSystem(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemFilterer{contract: contract}, nil
}

// bindSecureVotingSystem binds a generic wrapper to an already deployed contract.
func bindSecureVotingSystem(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SecureVotingSystemMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecureVotingSystem *SecureVotingSystemRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecureVotingSystem.Contract.SecureVotingSystemCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecureVotingSystem *SecureVotingSystemRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.SecureVotingSystemTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecureVotingSystem *SecureVotingSystemRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.SecureVotingSystemTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecureVotingSystem *SecureVotingSystemCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecureVotingSystem.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecureVotingSystem *SecureVotingSystemTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecureVotingSystem *SecureVotingSystemTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.contract.Transact(opts, method, params...)
}

// AuthorizedTerminals is a free data retrieval call binding the contract method 0x4596aee8.
//
// Solidity: function authorizedTerminals(address ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCaller) AuthorizedTerminals(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "authorizedTerminals", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AuthorizedTerminals is a free data retrieval call binding the contract method 0x4596aee8.
//
// Solidity: function authorizedTerminals(address ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemSession) AuthorizedTerminals(arg0 common.Address) (bool, error) {
	return _SecureVotingSystem.Contract.AuthorizedTerminals(&_SecureVotingSystem.CallOpts, arg0)
}

// AuthorizedTerminals is a free data retrieval call binding the contract method 0x4596aee8.
//
// Solidity: function authorizedTerminals(address ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) AuthorizedTerminals(arg0 common.Address) (bool, error) {
	return _SecureVotingSystem.Contract.AuthorizedTerminals(&_SecureVotingSystem.CallOpts, arg0)
}

// CurrentElectionId is a free data retrieval call binding the contract method 0x98ecf2a0.
//
// Solidity: function currentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) CurrentElectionId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "currentElectionId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentElectionId is a free data retrieval call binding the contract method 0x98ecf2a0.
//
// Solidity: function currentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) CurrentElectionId() (*big.Int, error) {
	return _SecureVotingSystem.Contract.CurrentElectionId(&_SecureVotingSystem.CallOpts)
}

// CurrentElectionId is a free data retrieval call binding the contract method 0x98ecf2a0.
//
// Solidity: function currentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) CurrentElectionId() (*big.Int, error) {
	return _SecureVotingSystem.Contract.CurrentElectionId(&_SecureVotingSystem.CallOpts)
}

// ElectionResults is a free data retrieval call binding the contract method 0x73ed31a3.
//
// Solidity: function electionResults(uint256 , string ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) ElectionResults(opts *bind.CallOpts, arg0 *big.Int, arg1 string) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "electionResults", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ElectionResults is a free data retrieval call binding the contract method 0x73ed31a3.
//
// Solidity: function electionResults(uint256 , string ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) ElectionResults(arg0 *big.Int, arg1 string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.ElectionResults(&_SecureVotingSystem.CallOpts, arg0, arg1)
}

// ElectionResults is a free data retrieval call binding the contract method 0x73ed31a3.
//
// Solidity: function electionResults(uint256 , string ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) ElectionResults(arg0 *big.Int, arg1 string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.ElectionResults(&_SecureVotingSystem.CallOpts, arg0, arg1)
}

// Elections is a free data retrieval call binding the contract method 0x5e6fef01.
//
// Solidity: function elections(uint256 ) view returns(uint256 id, string name, uint256 startTime, uint256 endTime, bool isActive, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemCaller) Elections(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id         *big.Int
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	TotalVotes *big.Int
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "elections", arg0)

	outstruct := new(struct {
		Id         *big.Int
		Name       string
		StartTime  *big.Int
		EndTime    *big.Int
		IsActive   bool
		TotalVotes *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.StartTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.IsActive = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.TotalVotes = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Elections is a free data retrieval call binding the contract method 0x5e6fef01.
//
// Solidity: function elections(uint256 ) view returns(uint256 id, string name, uint256 startTime, uint256 endTime, bool isActive, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemSession) Elections(arg0 *big.Int) (struct {
	Id         *big.Int
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	TotalVotes *big.Int
}, error) {
	return _SecureVotingSystem.Contract.Elections(&_SecureVotingSystem.CallOpts, arg0)
}

// Elections is a free data retrieval call binding the contract method 0x5e6fef01.
//
// Solidity: function elections(uint256 ) view returns(uint256 id, string name, uint256 startTime, uint256 endTime, bool isActive, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) Elections(arg0 *big.Int) (struct {
	Id         *big.Int
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	TotalVotes *big.Int
}, error) {
	return _SecureVotingSystem.Contract.Elections(&_SecureVotingSystem.CallOpts, arg0)
}

// GetCurrentElectionId is a free data retrieval call binding the contract method 0xfe2b536b.
//
// Solidity: function getCurrentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetCurrentElectionId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getCurrentElectionId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentElectionId is a free data retrieval call binding the contract method 0xfe2b536b.
//
// Solidity: function getCurrentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetCurrentElectionId() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetCurrentElectionId(&_SecureVotingSystem.CallOpts)
}

// GetCurrentElectionId is a free data retrieval call binding the contract method 0xfe2b536b.
//
// Solidity: function getCurrentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetCurrentElectionId() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetCurrentElectionId(&_SecureVotingSystem.CallOpts)
}

// GetElectionCandidateResults is a free data retrieval call binding the contract method 0x1cfc71e6.
//
// Solidity: function getElectionCandidateResults(uint256 _electionId) view returns(string[] candidateIds, uint256[] voteCounts)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetElectionCandidateResults(opts *bind.CallOpts, _electionId *big.Int) (struct {
	CandidateIds []string
	VoteCounts   []*big.Int
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getElectionCandidateResults", _electionId)

	outstruct := new(struct {
		CandidateIds []string
		VoteCounts   []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CandidateIds = *abi.ConvertType(out[0], new([]string)).(*[]string)
	outstruct.VoteCounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetElectionCandidateResults is a free data retrieval call binding the contract method 0x1cfc71e6.
//
// Solidity: function getElectionCandidateResults(uint256 _electionId) view returns(string[] candidateIds, uint256[] voteCounts)
func (_SecureVotingSystem *SecureVotingSystemSession) GetElectionCandidateResults(_electionId *big.Int) (struct {
	CandidateIds []string
	VoteCounts   []*big.Int
}, error) {
	return _SecureVotingSystem.Contract.GetElectionCandidateResults(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetElectionCandidateResults is a free data retrieval call binding the contract method 0x1cfc71e6.
//
// Solidity: function getElectionCandidateResults(uint256 _electionId) view returns(string[] candidateIds, uint256[] voteCounts)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetElectionCandidateResults(_electionId *big.Int) (struct {
	CandidateIds []string
	VoteCounts   []*big.Int
}, error) {
	return _SecureVotingSystem.Contract.GetElectionCandidateResults(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetElectionDetails is a free data retrieval call binding the contract method 0xf6049924.
//
// Solidity: function getElectionDetails(uint256 _electionId) view returns(string name, uint256 startTime, uint256 endTime, bool isActive, string[] candidates, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetElectionDetails(opts *bind.CallOpts, _electionId *big.Int) (struct {
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	Candidates []string
	TotalVotes *big.Int
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getElectionDetails", _electionId)

	outstruct := new(struct {
		Name       string
		StartTime  *big.Int
		EndTime    *big.Int
		IsActive   bool
		Candidates []string
		TotalVotes *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.StartTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.IsActive = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.Candidates = *abi.ConvertType(out[4], new([]string)).(*[]string)
	outstruct.TotalVotes = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetElectionDetails is a free data retrieval call binding the contract method 0xf6049924.
//
// Solidity: function getElectionDetails(uint256 _electionId) view returns(string name, uint256 startTime, uint256 endTime, bool isActive, string[] candidates, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemSession) GetElectionDetails(_electionId *big.Int) (struct {
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	Candidates []string
	TotalVotes *big.Int
}, error) {
	return _SecureVotingSystem.Contract.GetElectionDetails(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetElectionDetails is a free data retrieval call binding the contract method 0xf6049924.
//
// Solidity: function getElectionDetails(uint256 _electionId) view returns(string name, uint256 startTime, uint256 endTime, bool isActive, string[] candidates, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetElectionDetails(_electionId *big.Int) (struct {
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	Candidates []string
	TotalVotes *big.Int
}, error) {
	return _SecureVotingSystem.Contract.GetElectionDetails(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetElectionResults is a free data retrieval call binding the contract method 0xf67c7d06.
//
// Solidity: function getElectionResults(uint256 _electionId, string _candidateId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetElectionResults(opts *bind.CallOpts, _electionId *big.Int, _candidateId string) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getElectionResults", _electionId, _candidateId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetElectionResults is a free data retrieval call binding the contract method 0xf67c7d06.
//
// Solidity: function getElectionResults(uint256 _electionId, string _candidateId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetElectionResults(_electionId *big.Int, _candidateId string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetElectionResults(&_SecureVotingSystem.CallOpts, _electionId, _candidateId)
}

// GetElectionResults is a free data retrieval call binding the contract method 0xf67c7d06.
//
// Solidity: function getElectionResults(uint256 _electionId, string _candidateId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetElectionResults(_electionId *big.Int, _candidateId string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetElectionResults(&_SecureVotingSystem.CallOpts, _electionId, _candidateId)
}

// GetElectionStatistics is a free data retrieval call binding the contract method 0xe8b20ad7.
//
// Solidity: function getElectionStatistics(uint256 _electionId) view returns(uint256 totalVotes, uint256 validVotes, uint256 invalidVotes, uint256 duration, bool isCompleted)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetElectionStatistics(opts *bind.CallOpts, _electionId *big.Int) (struct {
	TotalVotes   *big.Int
	ValidVotes   *big.Int
	InvalidVotes *big.Int
	Duration     *big.Int
	IsCompleted  bool
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getElectionStatistics", _electionId)

	outstruct := new(struct {
		TotalVotes   *big.Int
		ValidVotes   *big.Int
		InvalidVotes *big.Int
		Duration     *big.Int
		IsCompleted  bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalVotes = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ValidVotes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.InvalidVotes = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.IsCompleted = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// GetElectionStatistics is a free data retrieval call binding the contract method 0xe8b20ad7.
//
// Solidity: function getElectionStatistics(uint256 _electionId) view returns(uint256 totalVotes, uint256 validVotes, uint256 invalidVotes, uint256 duration, bool isCompleted)
func (_SecureVotingSystem *SecureVotingSystemSession) GetElectionStatistics(_electionId *big.Int) (struct {
	TotalVotes   *big.Int
	ValidVotes   *big.Int
	InvalidVotes *big.Int
	Duration     *big.Int
	IsCompleted  bool
}, error) {
	return _SecureVotingSystem.Contract.GetElectionStatistics(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetElectionStatistics is a free data retrieval call binding the contract method 0xe8b20ad7.
//
// Solidity: function getElectionStatistics(uint256 _electionId) view returns(uint256 totalVotes, uint256 validVotes, uint256 invalidVotes, uint256 duration, bool isCompleted)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetElectionStatistics(_electionId *big.Int) (struct {
	TotalVotes   *big.Int
	ValidVotes   *big.Int
	InvalidVotes *big.Int
	Duration     *big.Int
	IsCompleted  bool
}, error) {
	return _SecureVotingSystem.Contract.GetElectionStatistics(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetPollingUnitVoteCount is a free data retrieval call binding the contract method 0xd293eb3b.
//
// Solidity: function getPollingUnitVoteCount(string _pollingUnitId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetPollingUnitVoteCount(opts *bind.CallOpts, _pollingUnitId string) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getPollingUnitVoteCount", _pollingUnitId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPollingUnitVoteCount is a free data retrieval call binding the contract method 0xd293eb3b.
//
// Solidity: function getPollingUnitVoteCount(string _pollingUnitId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetPollingUnitVoteCount(_pollingUnitId string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetPollingUnitVoteCount(&_SecureVotingSystem.CallOpts, _pollingUnitId)
}

// GetPollingUnitVoteCount is a free data retrieval call binding the contract method 0xd293eb3b.
//
// Solidity: function getPollingUnitVoteCount(string _pollingUnitId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetPollingUnitVoteCount(_pollingUnitId string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetPollingUnitVoteCount(&_SecureVotingSystem.CallOpts, _pollingUnitId)
}

// GetTotalElections is a free data retrieval call binding the contract method 0xa9392e0c.
//
// Solidity: function getTotalElections() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetTotalElections(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getTotalElections")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalElections is a free data retrieval call binding the contract method 0xa9392e0c.
//
// Solidity: function getTotalElections() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetTotalElections() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetTotalElections(&_SecureVotingSystem.CallOpts)
}

// GetTotalElections is a free data retrieval call binding the contract method 0xa9392e0c.
//
// Solidity: function getTotalElections() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetTotalElections() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetTotalElections(&_SecureVotingSystem.CallOpts)
}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetTotalVotes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getTotalVotes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetTotalVotes() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetTotalVotes(&_SecureVotingSystem.CallOpts)
}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetTotalVotes() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetTotalVotes(&_SecureVotingSystem.CallOpts)
}

// GetVoteDetails is a free data retrieval call binding the contract method 0x54a1b431.
//
// Solidity: function getVoteDetails(uint256 _voteId) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetVoteDetails(opts *bind.CallOpts, _voteId *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getVoteDetails", _voteId)

	outstruct := new(struct {
		VerificationHash [32]byte
		EncryptedVote    [32]byte
		Timestamp        *big.Int
		PollingUnitId    string
		ElectionId       *big.Int
		IsValid          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.VerificationHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.EncryptedVote = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Timestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PollingUnitId = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ElectionId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.IsValid = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// GetVoteDetails is a free data retrieval call binding the contract method 0x54a1b431.
//
// Solidity: function getVoteDetails(uint256 _voteId) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemSession) GetVoteDetails(_voteId *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	return _SecureVotingSystem.Contract.GetVoteDetails(&_SecureVotingSystem.CallOpts, _voteId)
}

// GetVoteDetails is a free data retrieval call binding the contract method 0x54a1b431.
//
// Solidity: function getVoteDetails(uint256 _voteId) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetVoteDetails(_voteId *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	return _SecureVotingSystem.Contract.GetVoteDetails(&_SecureVotingSystem.CallOpts, _voteId)
}

// GetVotesByTimeRange is a free data retrieval call binding the contract method 0x73b93c34.
//
// Solidity: function getVotesByTimeRange(uint256 _startTime, uint256 _endTime) view returns(uint256[])
func (_SecureVotingSystem *SecureVotingSystemCaller) GetVotesByTimeRange(opts *bind.CallOpts, _startTime *big.Int, _endTime *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getVotesByTimeRange", _startTime, _endTime)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetVotesByTimeRange is a free data retrieval call binding the contract method 0x73b93c34.
//
// Solidity: function getVotesByTimeRange(uint256 _startTime, uint256 _endTime) view returns(uint256[])
func (_SecureVotingSystem *SecureVotingSystemSession) GetVotesByTimeRange(_startTime *big.Int, _endTime *big.Int) ([]*big.Int, error) {
	return _SecureVotingSystem.Contract.GetVotesByTimeRange(&_SecureVotingSystem.CallOpts, _startTime, _endTime)
}

// GetVotesByTimeRange is a free data retrieval call binding the contract method 0x73b93c34.
//
// Solidity: function getVotesByTimeRange(uint256 _startTime, uint256 _endTime) view returns(uint256[])
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetVotesByTimeRange(_startTime *big.Int, _endTime *big.Int) ([]*big.Int, error) {
	return _SecureVotingSystem.Contract.GetVotesByTimeRange(&_SecureVotingSystem.CallOpts, _startTime, _endTime)
}

// HasVoted is a free data retrieval call binding the contract method 0x1b4613cb.
//
// Solidity: function hasVoted(bytes32 ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCaller) HasVoted(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "hasVoted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVoted is a free data retrieval call binding the contract method 0x1b4613cb.
//
// Solidity: function hasVoted(bytes32 ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemSession) HasVoted(arg0 [32]byte) (bool, error) {
	return _SecureVotingSystem.Contract.HasVoted(&_SecureVotingSystem.CallOpts, arg0)
}

// HasVoted is a free data retrieval call binding the contract method 0x1b4613cb.
//
// Solidity: function hasVoted(bytes32 ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) HasVoted(arg0 [32]byte) (bool, error) {
	return _SecureVotingSystem.Contract.HasVoted(&_SecureVotingSystem.CallOpts, arg0)
}

// HasVoterVoted is a free data retrieval call binding the contract method 0xc91d60ed.
//
// Solidity: function hasVoterVoted(bytes32 _verificationHash) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCaller) HasVoterVoted(opts *bind.CallOpts, _verificationHash [32]byte) (bool, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "hasVoterVoted", _verificationHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVoterVoted is a free data retrieval call binding the contract method 0xc91d60ed.
//
// Solidity: function hasVoterVoted(bytes32 _verificationHash) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemSession) HasVoterVoted(_verificationHash [32]byte) (bool, error) {
	return _SecureVotingSystem.Contract.HasVoterVoted(&_SecureVotingSystem.CallOpts, _verificationHash)
}

// HasVoterVoted is a free data retrieval call binding the contract method 0xc91d60ed.
//
// Solidity: function hasVoterVoted(bytes32 _verificationHash) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) HasVoterVoted(_verificationHash [32]byte) (bool, error) {
	return _SecureVotingSystem.Contract.HasVoterVoted(&_SecureVotingSystem.CallOpts, _verificationHash)
}

// IsTerminalAuthorized is a free data retrieval call binding the contract method 0x184acbab.
//
// Solidity: function isTerminalAuthorized(address _terminal) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCaller) IsTerminalAuthorized(opts *bind.CallOpts, _terminal common.Address) (bool, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "isTerminalAuthorized", _terminal)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTerminalAuthorized is a free data retrieval call binding the contract method 0x184acbab.
//
// Solidity: function isTerminalAuthorized(address _terminal) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemSession) IsTerminalAuthorized(_terminal common.Address) (bool, error) {
	return _SecureVotingSystem.Contract.IsTerminalAuthorized(&_SecureVotingSystem.CallOpts, _terminal)
}

// IsTerminalAuthorized is a free data retrieval call binding the contract method 0x184acbab.
//
// Solidity: function isTerminalAuthorized(address _terminal) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) IsTerminalAuthorized(_terminal common.Address) (bool, error) {
	return _SecureVotingSystem.Contract.IsTerminalAuthorized(&_SecureVotingSystem.CallOpts, _terminal)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecureVotingSystem *SecureVotingSystemCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecureVotingSystem *SecureVotingSystemSession) Owner() (common.Address, error) {
	return _SecureVotingSystem.Contract.Owner(&_SecureVotingSystem.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) Owner() (common.Address, error) {
	return _SecureVotingSystem.Contract.Owner(&_SecureVotingSystem.CallOpts)
}

// PollingUnits is a free data retrieval call binding the contract method 0x374904b2.
//
// Solidity: function pollingUnits(string ) view returns(string id, string name, string location, uint256 totalVoters, uint256 votesRecorded, bool isActive)
func (_SecureVotingSystem *SecureVotingSystemCaller) PollingUnits(opts *bind.CallOpts, arg0 string) (struct {
	Id            string
	Name          string
	Location      string
	TotalVoters   *big.Int
	VotesRecorded *big.Int
	IsActive      bool
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "pollingUnits", arg0)

	outstruct := new(struct {
		Id            string
		Name          string
		Location      string
		TotalVoters   *big.Int
		VotesRecorded *big.Int
		IsActive      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Location = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.TotalVoters = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VotesRecorded = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.IsActive = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// PollingUnits is a free data retrieval call binding the contract method 0x374904b2.
//
// Solidity: function pollingUnits(string ) view returns(string id, string name, string location, uint256 totalVoters, uint256 votesRecorded, bool isActive)
func (_SecureVotingSystem *SecureVotingSystemSession) PollingUnits(arg0 string) (struct {
	Id            string
	Name          string
	Location      string
	TotalVoters   *big.Int
	VotesRecorded *big.Int
	IsActive      bool
}, error) {
	return _SecureVotingSystem.Contract.PollingUnits(&_SecureVotingSystem.CallOpts, arg0)
}

// PollingUnits is a free data retrieval call binding the contract method 0x374904b2.
//
// Solidity: function pollingUnits(string ) view returns(string id, string name, string location, uint256 totalVoters, uint256 votesRecorded, bool isActive)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) PollingUnits(arg0 string) (struct {
	Id            string
	Name          string
	Location      string
	TotalVoters   *big.Int
	VotesRecorded *big.Int
	IsActive      bool
}, error) {
	return _SecureVotingSystem.Contract.PollingUnits(&_SecureVotingSystem.CallOpts, arg0)
}

// VerificationHashToVoteId is a free data retrieval call binding the contract method 0x8dc41911.
//
// Solidity: function verificationHashToVoteId(bytes32 ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) VerificationHashToVoteId(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "verificationHashToVoteId", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VerificationHashToVoteId is a free data retrieval call binding the contract method 0x8dc41911.
//
// Solidity: function verificationHashToVoteId(bytes32 ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) VerificationHashToVoteId(arg0 [32]byte) (*big.Int, error) {
	return _SecureVotingSystem.Contract.VerificationHashToVoteId(&_SecureVotingSystem.CallOpts, arg0)
}

// VerificationHashToVoteId is a free data retrieval call binding the contract method 0x8dc41911.
//
// Solidity: function verificationHashToVoteId(bytes32 ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) VerificationHashToVoteId(arg0 [32]byte) (*big.Int, error) {
	return _SecureVotingSystem.Contract.VerificationHashToVoteId(&_SecureVotingSystem.CallOpts, arg0)
}

// Votes is a free data retrieval call binding the contract method 0x5df81330.
//
// Solidity: function votes(uint256 ) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, string candidateId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemCaller) Votes(opts *bind.CallOpts, arg0 *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	CandidateId      string
	IsValid          bool
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "votes", arg0)

	outstruct := new(struct {
		VerificationHash [32]byte
		EncryptedVote    [32]byte
		Timestamp        *big.Int
		PollingUnitId    string
		ElectionId       *big.Int
		CandidateId      string
		IsValid          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.VerificationHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.EncryptedVote = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Timestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PollingUnitId = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ElectionId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.CandidateId = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.IsValid = *abi.ConvertType(out[6], new(bool)).(*bool)

	return *outstruct, err

}

// Votes is a free data retrieval call binding the contract method 0x5df81330.
//
// Solidity: function votes(uint256 ) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, string candidateId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemSession) Votes(arg0 *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	CandidateId      string
	IsValid          bool
}, error) {
	return _SecureVotingSystem.Contract.Votes(&_SecureVotingSystem.CallOpts, arg0)
}

// Votes is a free data retrieval call binding the contract method 0x5df81330.
//
// Solidity: function votes(uint256 ) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, string candidateId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) Votes(arg0 *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	CandidateId      string
	IsValid          bool
}, error) {
	return _SecureVotingSystem.Contract.Votes(&_SecureVotingSystem.CallOpts, arg0)
}

// AuthorizeTerminal is a paid mutator transaction binding the contract method 0xe744cf91.
//
// Solidity: function authorizeTerminal(address _terminal, bool _status) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) AuthorizeTerminal(opts *bind.TransactOpts, _terminal common.Address, _status bool) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "authorizeTerminal", _terminal, _status)
}

// AuthorizeTerminal is a paid mutator transaction binding the contract method 0xe744cf91.
//
// Solidity: function authorizeTerminal(address _terminal, bool _status) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) AuthorizeTerminal(_terminal common.Address, _status bool) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.AuthorizeTerminal(&_SecureVotingSystem.TransactOpts, _terminal, _status)
}

// AuthorizeTerminal is a paid mutator transaction binding the contract method 0xe744cf91.
//
// Solidity: function authorizeTerminal(address _terminal, bool _status) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) AuthorizeTerminal(_terminal common.Address, _status bool) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.AuthorizeTerminal(&_SecureVotingSystem.TransactOpts, _terminal, _status)
}

// CastVote is a paid mutator transaction binding the contract method 0x710f750c.
//
// Solidity: function castVote(bytes32 _verificationHash, bytes32 _encryptedVote, string _pollingUnitId, string _candidateId) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemTransactor) CastVote(opts *bind.TransactOpts, _verificationHash [32]byte, _encryptedVote [32]byte, _pollingUnitId string, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "castVote", _verificationHash, _encryptedVote, _pollingUnitId, _candidateId)
}

// CastVote is a paid mutator transaction binding the contract method 0x710f750c.
//
// Solidity: function castVote(bytes32 _verificationHash, bytes32 _encryptedVote, string _pollingUnitId, string _candidateId) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) CastVote(_verificationHash [32]byte, _encryptedVote [32]byte, _pollingUnitId string, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.CastVote(&_SecureVotingSystem.TransactOpts, _verificationHash, _encryptedVote, _pollingUnitId, _candidateId)
}

// CastVote is a paid mutator transaction binding the contract method 0x710f750c.
//
// Solidity: function castVote(bytes32 _verificationHash, bytes32 _encryptedVote, string _pollingUnitId, string _candidateId) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) CastVote(_verificationHash [32]byte, _encryptedVote [32]byte, _pollingUnitId string, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.CastVote(&_SecureVotingSystem.TransactOpts, _verificationHash, _encryptedVote, _pollingUnitId, _candidateId)
}

// CreateElection is a paid mutator transaction binding the contract method 0xbc279047.
//
// Solidity: function createElection(string _name, uint256 _startTime, uint256 _endTime, string[] _candidates) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemTransactor) CreateElection(opts *bind.TransactOpts, _name string, _startTime *big.Int, _endTime *big.Int, _candidates []string) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "createElection", _name, _startTime, _endTime, _candidates)
}

// CreateElection is a paid mutator transaction binding the contract method 0xbc279047.
//
// Solidity: function createElection(string _name, uint256 _startTime, uint256 _endTime, string[] _candidates) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) CreateElection(_name string, _startTime *big.Int, _endTime *big.Int, _candidates []string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.CreateElection(&_SecureVotingSystem.TransactOpts, _name, _startTime, _endTime, _candidates)
}

// CreateElection is a paid mutator transaction binding the contract method 0xbc279047.
//
// Solidity: function createElection(string _name, uint256 _startTime, uint256 _endTime, string[] _candidates) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) CreateElection(_name string, _startTime *big.Int, _endTime *big.Int, _candidates []string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.CreateElection(&_SecureVotingSystem.TransactOpts, _name, _startTime, _endTime, _candidates)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) EmergencyPause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "emergencyPause")
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_SecureVotingSystem *SecureVotingSystemSession) EmergencyPause() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.EmergencyPause(&_SecureVotingSystem.TransactOpts)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) EmergencyPause() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.EmergencyPause(&_SecureVotingSystem.TransactOpts)
}

// EndElection is a paid mutator transaction binding the contract method 0x59f78468.
//
// Solidity: function endElection() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) EndElection(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "endElection")
}

// EndElection is a paid mutator transaction binding the contract method 0x59f78468.
//
// Solidity: function endElection() returns()
func (_SecureVotingSystem *SecureVotingSystemSession) EndElection() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.EndElection(&_SecureVotingSystem.TransactOpts)
}

// EndElection is a paid mutator transaction binding the contract method 0x59f78468.
//
// Solidity: function endElection() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) EndElection() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.EndElection(&_SecureVotingSystem.TransactOpts)
}

// InvalidateVote is a paid mutator transaction binding the contract method 0x10fc46b3.
//
// Solidity: function invalidateVote(uint256 _voteId, string _reason) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) InvalidateVote(opts *bind.TransactOpts, _voteId *big.Int, _reason string) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "invalidateVote", _voteId, _reason)
}

// InvalidateVote is a paid mutator transaction binding the contract method 0x10fc46b3.
//
// Solidity: function invalidateVote(uint256 _voteId, string _reason) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) InvalidateVote(_voteId *big.Int, _reason string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.InvalidateVote(&_SecureVotingSystem.TransactOpts, _voteId, _reason)
}

// InvalidateVote is a paid mutator transaction binding the contract method 0x10fc46b3.
//
// Solidity: function invalidateVote(uint256 _voteId, string _reason) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) InvalidateVote(_voteId *big.Int, _reason string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.InvalidateVote(&_SecureVotingSystem.TransactOpts, _voteId, _reason)
}

// RegisterCandidate is a paid mutator transaction binding the contract method 0xd1009367.
//
// Solidity: function registerCandidate(uint256 _electionId, string _candidateId) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) RegisterCandidate(opts *bind.TransactOpts, _electionId *big.Int, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "registerCandidate", _electionId, _candidateId)
}

// RegisterCandidate is a paid mutator transaction binding the contract method 0xd1009367.
//
// Solidity: function registerCandidate(uint256 _electionId, string _candidateId) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) RegisterCandidate(_electionId *big.Int, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RegisterCandidate(&_SecureVotingSystem.TransactOpts, _electionId, _candidateId)
}

// RegisterCandidate is a paid mutator transaction binding the contract method 0xd1009367.
//
// Solidity: function registerCandidate(uint256 _electionId, string _candidateId) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) RegisterCandidate(_electionId *big.Int, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RegisterCandidate(&_SecureVotingSystem.TransactOpts, _electionId, _candidateId)
}

// RegisterCandidates is a paid mutator transaction binding the contract method 0x4ba7945f.
//
// Solidity: function registerCandidates(uint256 _electionId, string[] _candidateIds) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) RegisterCandidates(opts *bind.TransactOpts, _electionId *big.Int, _candidateIds []string) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "registerCandidates", _electionId, _candidateIds)
}

// RegisterCandidates is a paid mutator transaction binding the contract method 0x4ba7945f.
//
// Solidity: function registerCandidates(uint256 _electionId, string[] _candidateIds) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) RegisterCandidates(_electionId *big.Int, _candidateIds []string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RegisterCandidates(&_SecureVotingSystem.TransactOpts, _electionId, _candidateIds)
}

// RegisterCandidates is a paid mutator transaction binding the contract method 0x4ba7945f.
//
// Solidity: function registerCandidates(uint256 _electionId, string[] _candidateIds) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) RegisterCandidates(_electionId *big.Int, _candidateIds []string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RegisterCandidates(&_SecureVotingSystem.TransactOpts, _electionId, _candidateIds)
}

// RegisterPollingUnit is a paid mutator transaction binding the contract method 0xf42afb90.
//
// Solidity: function registerPollingUnit(string _pollingUnitId, string _name, string _location, uint256 _totalVoters) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) RegisterPollingUnit(opts *bind.TransactOpts, _pollingUnitId string, _name string, _location string, _totalVoters *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "registerPollingUnit", _pollingUnitId, _name, _location, _totalVoters)
}

// RegisterPollingUnit is a paid mutator transaction binding the contract method 0xf42afb90.
//
// Solidity: function registerPollingUnit(string _pollingUnitId, string _name, string _location, uint256 _totalVoters) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) RegisterPollingUnit(_pollingUnitId string, _name string, _location string, _totalVoters *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RegisterPollingUnit(&_SecureVotingSystem.TransactOpts, _pollingUnitId, _name, _location, _totalVoters)
}

// RegisterPollingUnit is a paid mutator transaction binding the contract method 0xf42afb90.
//
// Solidity: function registerPollingUnit(string _pollingUnitId, string _name, string _location, uint256 _totalVoters) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) RegisterPollingUnit(_pollingUnitId string, _name string, _location string, _totalVoters *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RegisterPollingUnit(&_SecureVotingSystem.TransactOpts, _pollingUnitId, _name, _location, _totalVoters)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecureVotingSystem *SecureVotingSystemSession) RenounceOwnership() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RenounceOwnership(&_SecureVotingSystem.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RenounceOwnership(&_SecureVotingSystem.TransactOpts)
}

// StartElection is a paid mutator transaction binding the contract method 0x6d32dc4b.
//
// Solidity: function startElection(uint256 _electionId) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) StartElection(opts *bind.TransactOpts, _electionId *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "startElection", _electionId)
}

// StartElection is a paid mutator transaction binding the contract method 0x6d32dc4b.
//
// Solidity: function startElection(uint256 _electionId) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) StartElection(_electionId *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.StartElection(&_SecureVotingSystem.TransactOpts, _electionId)
}

// StartElection is a paid mutator transaction binding the contract method 0x6d32dc4b.
//
// Solidity: function startElection(uint256 _electionId) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) StartElection(_electionId *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.StartElection(&_SecureVotingSystem.TransactOpts, _electionId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.TransferOwnership(&_SecureVotingSystem.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.TransferOwnership(&_SecureVotingSystem.TransactOpts, newOwner)
}

// SecureVotingSystemCandidateRegisteredIterator is returned from FilterCandidateRegistered and is used to iterate over the raw logs and unpacked data for CandidateRegistered events raised by the SecureVotingSystem contract.
type SecureVotingSystemCandidateRegisteredIterator struct {
	Event *SecureVotingSystemCandidateRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemCandidateRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemCandidateRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemCandidateRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemCandidateRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemCandidateRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemCandidateRegistered represents a CandidateRegistered event raised by the SecureVotingSystem contract.
type SecureVotingSystemCandidateRegistered struct {
	ElectionId  *big.Int
	CandidateId common.Hash
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCandidateRegistered is a free log retrieval operation binding the contract event 0x96b6e1d9af8279de0ae4d01600bcae708bdb292c4a8f8f150aff92f5caf56a42.
//
// Solidity: event CandidateRegistered(uint256 indexed electionId, string indexed candidateId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterCandidateRegistered(opts *bind.FilterOpts, electionId []*big.Int, candidateId []string) (*SecureVotingSystemCandidateRegisteredIterator, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}
	var candidateIdRule []interface{}
	for _, candidateIdItem := range candidateId {
		candidateIdRule = append(candidateIdRule, candidateIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "CandidateRegistered", electionIdRule, candidateIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemCandidateRegisteredIterator{contract: _SecureVotingSystem.contract, event: "CandidateRegistered", logs: logs, sub: sub}, nil
}

// WatchCandidateRegistered is a free log subscription operation binding the contract event 0x96b6e1d9af8279de0ae4d01600bcae708bdb292c4a8f8f150aff92f5caf56a42.
//
// Solidity: event CandidateRegistered(uint256 indexed electionId, string indexed candidateId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchCandidateRegistered(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemCandidateRegistered, electionId []*big.Int, candidateId []string) (event.Subscription, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}
	var candidateIdRule []interface{}
	for _, candidateIdItem := range candidateId {
		candidateIdRule = append(candidateIdRule, candidateIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "CandidateRegistered", electionIdRule, candidateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemCandidateRegistered)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "CandidateRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCandidateRegistered is a log parse operation binding the contract event 0x96b6e1d9af8279de0ae4d01600bcae708bdb292c4a8f8f150aff92f5caf56a42.
//
// Solidity: event CandidateRegistered(uint256 indexed electionId, string indexed candidateId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseCandidateRegistered(log types.Log) (*SecureVotingSystemCandidateRegistered, error) {
	event := new(SecureVotingSystemCandidateRegistered)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "CandidateRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemElectionCreatedIterator is returned from FilterElectionCreated and is used to iterate over the raw logs and unpacked data for ElectionCreated events raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionCreatedIterator struct {
	Event *SecureVotingSystemElectionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemElectionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemElectionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemElectionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemElectionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemElectionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemElectionCreated represents a ElectionCreated event raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionCreated struct {
	ElectionId *big.Int
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterElectionCreated is a free log retrieval operation binding the contract event 0xe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9.
//
// Solidity: event ElectionCreated(uint256 indexed electionId, string name, uint256 startTime, uint256 endTime)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterElectionCreated(opts *bind.FilterOpts, electionId []*big.Int) (*SecureVotingSystemElectionCreatedIterator, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "ElectionCreated", electionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemElectionCreatedIterator{contract: _SecureVotingSystem.contract, event: "ElectionCreated", logs: logs, sub: sub}, nil
}

// WatchElectionCreated is a free log subscription operation binding the contract event 0xe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9.
//
// Solidity: event ElectionCreated(uint256 indexed electionId, string name, uint256 startTime, uint256 endTime)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchElectionCreated(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemElectionCreated, electionId []*big.Int) (event.Subscription, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "ElectionCreated", electionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemElectionCreated)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseElectionCreated is a log parse operation binding the contract event 0xe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9.
//
// Solidity: event ElectionCreated(uint256 indexed electionId, string name, uint256 startTime, uint256 endTime)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseElectionCreated(log types.Log) (*SecureVotingSystemElectionCreated, error) {
	event := new(SecureVotingSystemElectionCreated)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemElectionEndedIterator is returned from FilterElectionEnded and is used to iterate over the raw logs and unpacked data for ElectionEnded events raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionEndedIterator struct {
	Event *SecureVotingSystemElectionEnded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemElectionEndedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemElectionEnded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemElectionEnded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemElectionEndedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemElectionEndedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemElectionEnded represents a ElectionEnded event raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionEnded struct {
	ElectionId *big.Int
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterElectionEnded is a free log retrieval operation binding the contract event 0x32e2c12037f9600b91a766ce53eab6909f3bdb865851cd9a8c7fafbdf249a9ce.
//
// Solidity: event ElectionEnded(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterElectionEnded(opts *bind.FilterOpts, electionId []*big.Int) (*SecureVotingSystemElectionEndedIterator, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "ElectionEnded", electionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemElectionEndedIterator{contract: _SecureVotingSystem.contract, event: "ElectionEnded", logs: logs, sub: sub}, nil
}

// WatchElectionEnded is a free log subscription operation binding the contract event 0x32e2c12037f9600b91a766ce53eab6909f3bdb865851cd9a8c7fafbdf249a9ce.
//
// Solidity: event ElectionEnded(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchElectionEnded(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemElectionEnded, electionId []*big.Int) (event.Subscription, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "ElectionEnded", electionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemElectionEnded)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionEnded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseElectionEnded is a log parse operation binding the contract event 0x32e2c12037f9600b91a766ce53eab6909f3bdb865851cd9a8c7fafbdf249a9ce.
//
// Solidity: event ElectionEnded(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseElectionEnded(log types.Log) (*SecureVotingSystemElectionEnded, error) {
	event := new(SecureVotingSystemElectionEnded)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionEnded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemElectionStartedIterator is returned from FilterElectionStarted and is used to iterate over the raw logs and unpacked data for ElectionStarted events raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionStartedIterator struct {
	Event *SecureVotingSystemElectionStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemElectionStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemElectionStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemElectionStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemElectionStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemElectionStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemElectionStarted represents a ElectionStarted event raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionStarted struct {
	ElectionId *big.Int
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterElectionStarted is a free log retrieval operation binding the contract event 0xff6a30dd22f5e8b783044c7d895a6e8592b55c56f139978d44dc39daf596731f.
//
// Solidity: event ElectionStarted(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterElectionStarted(opts *bind.FilterOpts, electionId []*big.Int) (*SecureVotingSystemElectionStartedIterator, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "ElectionStarted", electionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemElectionStartedIterator{contract: _SecureVotingSystem.contract, event: "ElectionStarted", logs: logs, sub: sub}, nil
}

// WatchElectionStarted is a free log subscription operation binding the contract event 0xff6a30dd22f5e8b783044c7d895a6e8592b55c56f139978d44dc39daf596731f.
//
// Solidity: event ElectionStarted(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchElectionStarted(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemElectionStarted, electionId []*big.Int) (event.Subscription, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "ElectionStarted", electionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemElectionStarted)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseElectionStarted is a log parse operation binding the contract event 0xff6a30dd22f5e8b783044c7d895a6e8592b55c56f139978d44dc39daf596731f.
//
// Solidity: event ElectionStarted(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseElectionStarted(log types.Log) (*SecureVotingSystemElectionStarted, error) {
	event := new(SecureVotingSystemElectionStarted)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SecureVotingSystem contract.
type SecureVotingSystemOwnershipTransferredIterator struct {
	Event *SecureVotingSystemOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemOwnershipTransferred represents a OwnershipTransferred event raised by the SecureVotingSystem contract.
type SecureVotingSystemOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SecureVotingSystemOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemOwnershipTransferredIterator{contract: _SecureVotingSystem.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemOwnershipTransferred)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseOwnershipTransferred(log types.Log) (*SecureVotingSystemOwnershipTransferred, error) {
	event := new(SecureVotingSystemOwnershipTransferred)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemPollingUnitRegisteredIterator is returned from FilterPollingUnitRegistered and is used to iterate over the raw logs and unpacked data for PollingUnitRegistered events raised by the SecureVotingSystem contract.
type SecureVotingSystemPollingUnitRegisteredIterator struct {
	Event *SecureVotingSystemPollingUnitRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemPollingUnitRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemPollingUnitRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemPollingUnitRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemPollingUnitRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemPollingUnitRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemPollingUnitRegistered represents a PollingUnitRegistered event raised by the SecureVotingSystem contract.
type SecureVotingSystemPollingUnitRegistered struct {
	PollingUnitId common.Hash
	Name          string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPollingUnitRegistered is a free log retrieval operation binding the contract event 0xb4fbf858aaf58f916976b6c4668154c1e069b7abc44972f310db304359cf28ce.
//
// Solidity: event PollingUnitRegistered(string indexed pollingUnitId, string name)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterPollingUnitRegistered(opts *bind.FilterOpts, pollingUnitId []string) (*SecureVotingSystemPollingUnitRegisteredIterator, error) {

	var pollingUnitIdRule []interface{}
	for _, pollingUnitIdItem := range pollingUnitId {
		pollingUnitIdRule = append(pollingUnitIdRule, pollingUnitIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "PollingUnitRegistered", pollingUnitIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemPollingUnitRegisteredIterator{contract: _SecureVotingSystem.contract, event: "PollingUnitRegistered", logs: logs, sub: sub}, nil
}

// WatchPollingUnitRegistered is a free log subscription operation binding the contract event 0xb4fbf858aaf58f916976b6c4668154c1e069b7abc44972f310db304359cf28ce.
//
// Solidity: event PollingUnitRegistered(string indexed pollingUnitId, string name)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchPollingUnitRegistered(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemPollingUnitRegistered, pollingUnitId []string) (event.Subscription, error) {

	var pollingUnitIdRule []interface{}
	for _, pollingUnitIdItem := range pollingUnitId {
		pollingUnitIdRule = append(pollingUnitIdRule, pollingUnitIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "PollingUnitRegistered", pollingUnitIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemPollingUnitRegistered)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "PollingUnitRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePollingUnitRegistered is a log parse operation binding the contract event 0xb4fbf858aaf58f916976b6c4668154c1e069b7abc44972f310db304359cf28ce.
//
// Solidity: event PollingUnitRegistered(string indexed pollingUnitId, string name)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParsePollingUnitRegistered(log types.Log) (*SecureVotingSystemPollingUnitRegistered, error) {
	event := new(SecureVotingSystemPollingUnitRegistered)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "PollingUnitRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemTerminalAuthorizedIterator is returned from FilterTerminalAuthorized and is used to iterate over the raw logs and unpacked data for TerminalAuthorized events raised by the SecureVotingSystem contract.
type SecureVotingSystemTerminalAuthorizedIterator struct {
	Event *SecureVotingSystemTerminalAuthorized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemTerminalAuthorizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemTerminalAuthorized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemTerminalAuthorized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemTerminalAuthorizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemTerminalAuthorizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemTerminalAuthorized represents a TerminalAuthorized event raised by the SecureVotingSystem contract.
type SecureVotingSystemTerminalAuthorized struct {
	Terminal common.Address
	Status   bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTerminalAuthorized is a free log retrieval operation binding the contract event 0x1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0.
//
// Solidity: event TerminalAuthorized(address indexed terminal, bool status)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterTerminalAuthorized(opts *bind.FilterOpts, terminal []common.Address) (*SecureVotingSystemTerminalAuthorizedIterator, error) {

	var terminalRule []interface{}
	for _, terminalItem := range terminal {
		terminalRule = append(terminalRule, terminalItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "TerminalAuthorized", terminalRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemTerminalAuthorizedIterator{contract: _SecureVotingSystem.contract, event: "TerminalAuthorized", logs: logs, sub: sub}, nil
}

// WatchTerminalAuthorized is a free log subscription operation binding the contract event 0x1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0.
//
// Solidity: event TerminalAuthorized(address indexed terminal, bool status)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchTerminalAuthorized(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemTerminalAuthorized, terminal []common.Address) (event.Subscription, error) {

	var terminalRule []interface{}
	for _, terminalItem := range terminal {
		terminalRule = append(terminalRule, terminalItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "TerminalAuthorized", terminalRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemTerminalAuthorized)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "TerminalAuthorized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTerminalAuthorized is a log parse operation binding the contract event 0x1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0.
//
// Solidity: event TerminalAuthorized(address indexed terminal, bool status)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseTerminalAuthorized(log types.Log) (*SecureVotingSystemTerminalAuthorized, error) {
	event := new(SecureVotingSystemTerminalAuthorized)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "TerminalAuthorized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemVoteCastIterator is returned from FilterVoteCast and is used to iterate over the raw logs and unpacked data for VoteCast events raised by the SecureVotingSystem contract.
type SecureVotingSystemVoteCastIterator struct {
	Event *SecureVotingSystemVoteCast // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemVoteCastIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemVoteCast)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemVoteCast)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemVoteCastIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemVoteCastIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemVoteCast represents a VoteCast event raised by the SecureVotingSystem contract.
type SecureVotingSystemVoteCast struct {
	VerificationHash [32]byte
	PollingUnitId    common.Hash
	ElectionId       *big.Int
	Timestamp        *big.Int
	VoteId           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterVoteCast is a free log retrieval operation binding the contract event 0xdf9dbd71c12ac0ec889f1cad7d0e15a26cc5765f926d01d606c0eb683a161d7d.
//
// Solidity: event VoteCast(bytes32 indexed verificationHash, string indexed pollingUnitId, uint256 indexed electionId, uint256 timestamp, uint256 voteId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterVoteCast(opts *bind.FilterOpts, verificationHash [][32]byte, pollingUnitId []string, electionId []*big.Int) (*SecureVotingSystemVoteCastIterator, error) {

	var verificationHashRule []interface{}
	for _, verificationHashItem := range verificationHash {
		verificationHashRule = append(verificationHashRule, verificationHashItem)
	}
	var pollingUnitIdRule []interface{}
	for _, pollingUnitIdItem := range pollingUnitId {
		pollingUnitIdRule = append(pollingUnitIdRule, pollingUnitIdItem)
	}
	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "VoteCast", verificationHashRule, pollingUnitIdRule, electionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemVoteCastIterator{contract: _SecureVotingSystem.contract, event: "VoteCast", logs: logs, sub: sub}, nil
}

// WatchVoteCast is a free log subscription operation binding the contract event 0xdf9dbd71c12ac0ec889f1cad7d0e15a26cc5765f926d01d606c0eb683a161d7d.
//
// Solidity: event VoteCast(bytes32 indexed verificationHash, string indexed pollingUnitId, uint256 indexed electionId, uint256 timestamp, uint256 voteId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchVoteCast(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemVoteCast, verificationHash [][32]byte, pollingUnitId []string, electionId []*big.Int) (event.Subscription, error) {

	var verificationHashRule []interface{}
	for _, verificationHashItem := range verificationHash {
		verificationHashRule = append(verificationHashRule, verificationHashItem)
	}
	var pollingUnitIdRule []interface{}
	for _, pollingUnitIdItem := range pollingUnitId {
		pollingUnitIdRule = append(pollingUnitIdRule, pollingUnitIdItem)
	}
	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "VoteCast", verificationHashRule, pollingUnitIdRule, electionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemVoteCast)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "VoteCast", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteCast is a log parse operation binding the contract event 0xdf9dbd71c12ac0ec889f1cad7d0e15a26cc5765f926d01d606c0eb683a161d7d.
//
// Solidity: event VoteCast(bytes32 indexed verificationHash, string indexed pollingUnitId, uint256 indexed electionId, uint256 timestamp, uint256 voteId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseVoteCast(log types.Log) (*SecureVotingSystemVoteCast, error) {
	event := new(SecureVotingSystemVoteCast)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "VoteCast", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemVoteInvalidatedIterator is returned from FilterVoteInvalidated and is used to iterate over the raw logs and unpacked data for VoteInvalidated events raised by the SecureVotingSystem contract.
type SecureVotingSystemVoteInvalidatedIterator struct {
	Event *SecureVotingSystemVoteInvalidated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemVoteInvalidatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemVoteInvalidated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemVoteInvalidated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemVoteInvalidatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemVoteInvalidatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemVoteInvalidated represents a VoteInvalidated event raised by the SecureVotingSystem contract.
type SecureVotingSystemVoteInvalidated struct {
	VoteId *big.Int
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVoteInvalidated is a free log retrieval operation binding the contract event 0x135777869117aa60ca380541543f5506294b4330cef23c24067a9bd0bb1f0ff4.
//
// Solidity: event VoteInvalidated(uint256 indexed voteId, string reason)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterVoteInvalidated(opts *bind.FilterOpts, voteId []*big.Int) (*SecureVotingSystemVoteInvalidatedIterator, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "VoteInvalidated", voteIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemVoteInvalidatedIterator{contract: _SecureVotingSystem.contract, event: "VoteInvalidated", logs: logs, sub: sub}, nil
}

// WatchVoteInvalidated is a free log subscription operation binding the contract event 0x135777869117aa60ca380541543f5506294b4330cef23c24067a9bd0bb1f0ff4.
//
// Solidity: event VoteInvalidated(uint256 indexed voteId, string reason)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchVoteInvalidated(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemVoteInvalidated, voteId []*big.Int) (event.Subscription, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "VoteInvalidated", voteIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemVoteInvalidated)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "VoteInvalidated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteInvalidated is a log parse operation binding the contract event 0x135777869117aa60ca380541543f5506294b4330cef23c24067a9bd0bb1f0ff4.
//
// Solidity: event VoteInvalidated(uint256 indexed voteId, string reason)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseVoteInvalidated(log types.Log) (*SecureVotingSystemVoteInvalidated, error) {
	event := new(SecureVotingSystemVoteInvalidated)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "VoteInvalidated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
