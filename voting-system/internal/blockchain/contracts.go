// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package blockchain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SecureVotingSystemMetaData contains all meta data concerning the SecureVotingSystem contract.
var SecureVotingSystemMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ElectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ElectionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ElectionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"pollingUnitId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PollingUnitRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"terminal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"TerminalAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"verificationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"pollingUnitId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteInvalidated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedTerminals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"currentElectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"electionResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pollingUnits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVoters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesRecorded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verificationHashToVoteId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"verificationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVote\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pollingUnitId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_candidates\",\"type\":\"string[]\"}],\"name\":\"createElection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_verificationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_encryptedVote\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_pollingUnitId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_candidateId\",\"type\":\"string\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_verificationHash\",\"type\":\"bytes32\"}],\"name\":\"hasVoterVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pollingUnitId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalVoters\",\"type\":\"uint256\"}],\"name\":\"registerPollingUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terminal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"authorizeTerminal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"isTerminalAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVoteDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"verificationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVote\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pollingUnitId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"getElectionDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"candidates\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_candidateId\",\"type\":\"string\"}],\"name\":\"getElectionResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"getCurrentElectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"getTotalElections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pollingUnitId\",\"type\":\"string\"}],\"name\":\"getPollingUnitVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"invalidateVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"getVotesByTimeRange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"getElectionStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invalidVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a33610073565b600180805533600081815260086020908152604091829020805460ff191685179055905192835290917f1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0910160405180910390a26100c3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612a61806100d26000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063d293eb3b116100a2578063f42afb9011610071578063f42afb90146104a5578063f6049924146104b8578063f67c7d06146104dd578063fe2b536b146104f057600080fd5b8063d293eb3b1461042f578063e744cf9114610442578063e8b20ad714610455578063f2fde38b1461049257600080fd5b80639a0e7d66116100de5780639a0e7d66146103e9578063a9392e0c146103f1578063bc279047146103f9578063c91d60ed1461040c57600080fd5b80638da5cb5b146103a55780638dc41911146103c057806398ecf2a0146103e057600080fd5b806359f784681161017c578063710f750c1161014b578063710f750c14610320578063715018a61461034157806373b93c341461034957806373ed31a31461036957600080fd5b806359f78468146102cd5780635df81330146102d55780635e6fef01146102e85780636d32dc4b1461030d57600080fd5b8063374904b2116101b8578063374904b2146102585780634596aee81461027d57806351858e27146102a057806354a1b431146102a857600080fd5b806310fc46b3146101df578063184acbab146101f45780631b4613cb14610235575b600080fd5b6101f26101ed3660046121f2565b6104f8565b005b610220610202366004612255565b6001600160a01b031660009081526008602052604090205460ff1690565b60405190151581526020015b60405180910390f35b610220610243366004612277565b60046020526000908152604090205460ff1681565b61026b610266366004612290565b610786565b60405161022c9695949392919061231d565b61022061028b366004612255565b60086020526000908152604090205460ff1681565b6101f2610962565b6102bb6102b6366004612277565b610991565b60405161022c96959493929190612377565b6101f2610b16565b6102bb6102e3366004612277565b610bf4565b6102fb6102f6366004612277565b610cb7565b60405161022c969594939291906123b6565b6101f261031b366004612277565b610d7b565b61033361032e3660046123f4565b610f94565b60405190815260200161022c565b6101f26114bc565b61035c61035736600461246b565b6114ce565b60405161022c919061248d565b6103336103773660046121f2565b600a602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b6000546040516001600160a01b03909116815260200161022c565b6103336103ce366004612277565b60066020526000908152604090205481565b610333600b5481565b61033361169e565b6103336116ae565b6103336104073660046124d1565b6116b9565b61022061041a366004612277565b60009081526004602052604090205460ff1690565b61033361043d366004612290565b6118fd565b6101f26104503660046125c9565b611928565b610468610463366004612277565b6119ed565b6040805195865260208601949094529284019190915260608301521515608082015260a00161022c565b6101f26104a0366004612255565b611af4565b6101f26104b3366004612605565b611b6d565b6104cb6104c6366004612277565b611d63565b60405161022c96959493929190612695565b6103336104eb3660046121f2565b611f48565b600b54610333565b610500611f7b565b60008211801561051257506002548211155b6105635760405162461bcd60e51b815260206004820152601d60248201527f566f74696e6753797374656d3a20496e76616c696420766f746520494400000060448201526064015b60405180910390fd5b6000828152600560208190526040909120015460ff166105d05760405162461bcd60e51b815260206004820152602260248201527f566f74696e6753797374656d3a20566f746520616c726561647920696e76616c6044820152611a5960f21b606482015260840161055a565b6000828152600560208181526040808420928301805460ff19169055805160c0810182528354815260018401549281019290925260028301549082015260038201805491929160608401919061062590612727565b80601f016020809104026020016040519081016040528092919081815260200182805461065190612727565b801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b505050918352505060048281015460208084019190915260059093015460ff908116151560409384015260808501516000908152600790945291909220909101549192501615610749576080810151600090815260076020819052604082200180549161070a83612777565b919050555060098160600151604051610723919061278e565b908152604051908190036020019020600401805490600061074383612777565b91905055505b827f135777869117aa60ca380541543f5506294b4330cef23c24067a9bd0bb1f0ff48360405161077991906127aa565b60405180910390a2505050565b80516020818301810180516009825292820191909301209152805481906107ac90612727565b80601f01602080910402602001604051908101604052809291908181526020018280546107d890612727565b80156108255780601f106107fa57610100808354040283529160200191610825565b820191906000526020600020905b81548152906001019060200180831161080857829003601f168201915b50505050509080600101805461083a90612727565b80601f016020809104026020016040519081016040528092919081815260200182805461086690612727565b80156108b35780601f10610888576101008083540402835291602001916108b3565b820191906000526020600020905b81548152906001019060200180831161089657829003601f168201915b5050505050908060020180546108c890612727565b80601f01602080910402602001604051908101604052809291908181526020018280546108f490612727565b80156109415780601f1061091657610100808354040283529160200191610941565b820191906000526020600020905b81548152906001019060200180831161092457829003601f168201915b50505050600383015460048401546005909401549293909290915060ff1686565b61096a611f7b565b600b541561098f57600b546000908152600760205260409020600401805460ff191690555b565b600080600060606000806000871180156109ad57506002548711155b6109f95760405162461bcd60e51b815260206004820152601d60248201527f566f74696e6753797374656d3a20496e76616c696420766f7465204944000000604482015260640161055a565b6000600560008981526020019081526020016000206040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610a4790612727565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7390612727565b8015610ac05780601f10610a9557610100808354040283529160200191610ac0565b820191906000526020600020905b815481529060010190602001808311610aa357829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff161515604091820152825191830151908301516060840151608085015160a090950151939d929c50909a509850919650945092505050565b610b1e611f7b565b6000600b5411610b705760405162461bcd60e51b815260206004820181905260248201527f566f74696e6753797374656d3a204e6f2061637469766520656c656374696f6e604482015260640161055a565b600b546000908152600760205260409020600481015460ff16610ba55760405162461bcd60e51b815260040161055a906127bd565b60048101805460ff19169055600b8054600090915560405142815281907f32e2c12037f9600b91a766ce53eab6909f3bdb865851cd9a8c7fafbdf249a9ce906020015b60405180910390a25050565b600560205260009081526040902080546001820154600283015460038401805493949293919291610c2490612727565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5090612727565b8015610c9d5780601f10610c7257610100808354040283529160200191610c9d565b820191906000526020600020905b815481529060010190602001808311610c8057829003601f168201915b50505050600483015460059093015491929160ff16905086565b60076020526000908152604090208054600182018054919291610cd990612727565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0590612727565b8015610d525780601f10610d2757610100808354040283529160200191610d52565b820191906000526020600020905b815481529060010190602001808311610d3557829003601f168201915b5050506002840154600385015460048601546007909601549495919490935060ff909116915086565b610d83611f7b565b600081118015610d9557506003548111155b610db15760405162461bcd60e51b815260040161055a906127fe565b600b5415610e125760405162461bcd60e51b815260206004820152602860248201527f566f74696e6753797374656d3a20416e6f7468657220656c656374696f6e2069604482015267732061637469766560c01b606482015260840161055a565b6000818152600760205260409020600481015460ff1615610e845760405162461bcd60e51b815260206004820152602660248201527f566f74696e6753797374656d3a20456c656374696f6e20616c726561647920736044820152651d185c9d195960d21b606482015260840161055a565b8060020154421015610eee5760405162461bcd60e51b815260206004820152602d60248201527f566f74696e6753797374656d3a20456c656374696f6e2073746172742074696d60448201526c19481b9bdd081c995858da1959609a1b606482015260840161055a565b80600301544210610f4c5760405162461bcd60e51b815260206004820152602260248201527f566f74696e6753797374656d3a20456c656374696f6e20686173206578706972604482015261195960f21b606482015260840161055a565b60048101805460ff19166001179055600b82905560405182907fff6a30dd22f5e8b783044c7d895a6e8592b55c56f139978d44dc39daf596731f90610be89042815260200190565b3360009081526008602052604081205460ff16610fff5760405162461bcd60e51b815260206004820152602360248201527f566f74696e6753797374656d3a20556e617574686f72697a6564207465726d696044820152621b985b60ea1b606482015260840161055a565b6000600b54116110515760405162461bcd60e51b815260206004820181905260248201527f566f74696e6753797374656d3a204e6f2061637469766520656c656374696f6e604482015260640161055a565b600b546000908152600760205260409020600481015460ff166110865760405162461bcd60e51b815260040161055a906127bd565b8060020154421015801561109e575080600301544211155b6110f85760405162461bcd60e51b815260206004820152602560248201527f566f74696e6753797374656d3a20456c656374696f6e206e6f7420696e20736560448201526439b9b4b7b760d91b606482015260840161055a565b83600981604051611109919061278e565b9081526040519081900360200190206005015460ff166111765760405162461bcd60e51b815260206004820152602260248201527f566f74696e6753797374656d3a20496e76616c696420706f6c6c696e6720756e6044820152611a5d60f21b606482015260840161055a565b61117e611fd5565b60008781526004602052604090205460ff16156111f15760405162461bcd60e51b815260206004820152602b60248201527f566f74696e6753797374656d3a20566f7465722068617320616c72656164792060448201526a63617374206120766f746560a81b606482015260840161055a565b600b54600090815260076020526040812090805b600583015481101561126d57868051906020012083600501828154811061122e5761122e61283f565b906000526020600020016040516112459190612855565b60405180910390200361125b576001915061126d565b80611265816128cb565b915050611205565b50806112bb5760405162461bcd60e51b815260206004820152601f60248201527f566f74696e6753797374656d3a20496e76616c69642063616e64696461746500604482015260640161055a565b6000898152600460205260409020805460ff191660011790556112e2600280546001019055565b60006112ed60025490565b6040805160c0810182528c815260208082018d815242838501908152606084018e8152600b546080860152600160a0860181905260008881526005909552959093208451815591519482019490945592516002840155519293509160038201906113579082612933565b506080820151600482015560a0909101516005909101805460ff191691151591909117905560008a8152600660208190526040918290208390559051908401906113a290899061278e565b90815260405190819003602001902080549060006113bf836128cb565b90915550506007830180549060006113d6836128cb565b9091555050600b546000908152600a60205260409081902090516113fb90899061278e565b9081526040519081900360200190208054906000611418836128cb565b919050555060098860405161142d919061278e565b908152604051908190036020019020600401805490600061144d836128cb565b9190505550600b5488604051611463919061278e565b6040805191829003822042835260208301859052918d917fdf9dbd71c12ac0ec889f1cad7d0e15a26cc5765f926d01d606c0eb683a161d7d910160405180910390a4945050506114b260018055565b5050949350505050565b6114c4611f7b565b61098f600061202e565b6060828210156115205760405162461bcd60e51b815260206004820181905260248201527f566f74696e6753797374656d3a20496e76616c69642074696d652072616e6765604482015260640161055a565b600061152b60025490565b905060008167ffffffffffffffff8111156115485761154861213b565b604051908082528060200260200182016040528015611571578160200160208202803683370190505b509050600060015b8381116115f55760008181526005602052604090206002015487118015906115b257506000818152600560205260409020600201548610155b156115e357808383815181106115ca576115ca61283f565b6020908102919091010152816115df816128cb565b9250505b806115ed816128cb565b915050611579565b5060008167ffffffffffffffff8111156116115761161161213b565b60405190808252806020026020018201604052801561163a578160200160208202803683370190505b50905060005b828110156116915783818151811061165a5761165a61283f565b60200260200101518282815181106116745761167461283f565b602090810291909101015280611689816128cb565b915050611640565b5093505050505b92915050565b60006116a960025490565b905090565b60006116a960035490565b60006116c3611f7b565b4284116117255760405162461bcd60e51b815260206004820152602a60248201527f566f74696e6753797374656d3a2053746172742074696d65206d75737420626560448201526920696e2066757475726560b01b606482015260840161055a565b83831161178c5760405162461bcd60e51b815260206004820152602f60248201527f566f74696e6753797374656d3a20456e642074696d65206d757374206265206160448201526e667465722073746172742074696d6560881b606482015260840161055a565b60008251116117e85760405162461bcd60e51b815260206004820152602260248201527f566f74696e6753797374656d3a204d75737420686176652063616e6469646174604482015261657360f01b606482015260840161055a565b6117f6600380546001019055565b600061180160035490565b6000818152600760205260409020818155909150600181016118238882612933565b50600281018690556003810185905560048101805460ff191690558351611853906005830190602087019061207e565b506000600782018190555b84518110156118b65760008260060186838151811061187f5761187f61283f565b6020026020010151604051611894919061278e565b90815260405190819003602001902055806118ae816128cb565b91505061185e565b50817fe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d98888886040516118eb939291906129f3565b60405180910390a25095945050505050565b600060098260405161190f919061278e565b9081526020016040518091039020600401549050919050565b611930611f7b565b6001600160a01b0382166119955760405162461bcd60e51b815260206004820152602660248201527f566f74696e6753797374656d3a20496e76616c6964207465726d696e616c206160448201526564647265737360d01b606482015260840161055a565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527f1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac09101610be8565b60008060008060008086118015611a0657506003548611155b611a225760405162461bcd60e51b815260040161055a906127fe565b600086815260076020819052604082209081015490918060015b6002548111611aab576000818152600560205260409020600401548b9003611a99576000818152600560208190526040909120015460ff1615611a8b5782611a83816128cb565b935050611a99565b81611a95816128cb565b9250505b80611aa3816128cb565b915050611a3c565b50600084600201548560030154611ac29190612a18565b600486015490915060009060ff16158015611ae05750856003015442115b949c939b5091995097509195509350505050565b611afc611f7b565b6001600160a01b038116611b615760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161055a565b611b6a8161202e565b50565b611b75611f7b565b6000845111611bd45760405162461bcd60e51b815260206004820152602560248201527f566f74696e6753797374656d3a20496e76616c696420706f6c6c696e6720756e6044820152641a5d08125160da1b606482015260840161055a565b600984604051611be4919061278e565b9081526040519081900360200190206005015460ff1615611c595760405162461bcd60e51b815260206004820152602960248201527f566f74696e6753797374656d3a20506f6c6c696e6720756e697420616c72656160448201526864792065786973747360b81b606482015260840161055a565b6040518060c001604052808581526020018481526020018381526020018281526020016000815260200160011515815250600985604051611c9a919061278e565b90815260405190819003602001902081518190611cb79082612933565b5060208201516001820190611ccc9082612933565b5060408201516002820190611ce19082612933565b50606082015160038201556080820151600482015560a0909101516005909101805460ff1916911515919091179055604051611d1e90859061278e565b60405180910390207fb4fbf858aaf58f916976b6c4668154c1e069b7abc44972f310db304359cf28ce84604051611d5591906127aa565b60405180910390a250505050565b60606000806000606060008087118015611d7f57506003548711155b611d9b5760405162461bcd60e51b815260040161055a906127fe565b6000878152600760208190526040909120600281015460038201546004830154938301546001840180549495909460ff9091169160058701918690611ddf90612727565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0b90612727565b8015611e585780601f10611e2d57610100808354040283529160200191611e58565b820191906000526020600020905b815481529060010190602001808311611e3b57829003601f168201915b5050505050955081805480602002602001604051908101604052809291908181526020016000905b82821015611f2c578382906000526020600020018054611e9f90612727565b80601f0160208091040260200160405190810160405280929190818152602001828054611ecb90612727565b8015611f185780601f10611eed57610100808354040283529160200191611f18565b820191906000526020600020905b815481529060010190602001808311611efb57829003601f168201915b505050505081526020019060010190611e80565b5050505091509650965096509650965096505091939550919395565b6000828152600a60205260408082209051611f6490849061278e565b908152602001604051809103902054905092915050565b6000546001600160a01b0316331461098f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161055a565b6002600154036120275760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161055a565b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156120c4579160200282015b828111156120c457825182906120b49082612933565b509160200191906001019061209e565b506120d09291506120d4565b5090565b808211156120d05760006120e882826120f1565b506001016120d4565b5080546120fd90612727565b6000825580601f1061210d575050565b601f016020900490600052602060002090810190611b6a91905b808211156120d05760008155600101612127565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561217a5761217a61213b565b604052919050565b600082601f83011261219357600080fd5b813567ffffffffffffffff8111156121ad576121ad61213b565b6121c0601f8201601f1916602001612151565b8181528460208386010111156121d557600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561220557600080fd5b82359150602083013567ffffffffffffffff81111561222357600080fd5b61222f85828601612182565b9150509250929050565b80356001600160a01b038116811461225057600080fd5b919050565b60006020828403121561226757600080fd5b61227082612239565b9392505050565b60006020828403121561228957600080fd5b5035919050565b6000602082840312156122a257600080fd5b813567ffffffffffffffff8111156122b957600080fd5b6122c584828501612182565b949350505050565b60005b838110156122e85781810151838201526020016122d0565b50506000910152565b600081518084526123098160208601602086016122cd565b601f01601f19169290920160200192915050565b60c08152600061233060c08301896122f1565b828103602084015261234281896122f1565b9050828103604084015261235681886122f1565b606084019690965250506080810192909252151560a0909101529392505050565b86815285602082015284604082015260c06060820152600061239c60c08301866122f1565b60808301949094525090151560a090910152949350505050565b86815260c0602082015260006123cf60c08301886122f1565b6040830196909652506060810193909352901515608083015260a09091015292915050565b6000806000806080858703121561240a57600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561243057600080fd5b61243c88838901612182565b9350606087013591508082111561245257600080fd5b5061245f87828801612182565b91505092959194509250565b6000806040838503121561247e57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156124c5578351835292840192918401916001016124a9565b50909695505050505050565b600080600080608085870312156124e757600080fd5b843567ffffffffffffffff808211156124ff57600080fd5b61250b88838901612182565b9550602091508187013594506040870135935060608701358181111561253057600080fd5b8701601f8101891361254157600080fd5b8035828111156125535761255361213b565b8060051b612562858201612151565b918252828101850191858101908c84111561257c57600080fd5b86850192505b838310156125b85782358681111561259a5760008081fd5b6125a88e8983890101612182565b8352509186019190860190612582565b999c989b5096995050505050505050565b600080604083850312156125dc57600080fd5b6125e583612239565b9150602083013580151581146125fa57600080fd5b809150509250929050565b6000806000806080858703121561261b57600080fd5b843567ffffffffffffffff8082111561263357600080fd5b61263f88838901612182565b9550602087013591508082111561265557600080fd5b61266188838901612182565b9450604087013591508082111561267757600080fd5b5061268487828801612182565b949793965093946060013593505050565b60c0815260006126a860c08301896122f1565b60208881850152876040850152861515606085015283820360808501528186518084528284019150828160051b85010183890160005b8381101561270c57601f198784030185526126fa8383516122f1565b948601949250908501906001016126de565b505080955050505050508260a0830152979650505050505050565b600181811c9082168061273b57607f821691505b60208210810361275b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008161278657612786612761565b506000190190565b600082516127a08184602087016122cd565b9190910192915050565b60208152600061227060208301846122f1565b60208082526021908201527f566f74696e6753797374656d3a20456c656374696f6e206e6f742061637469766040820152606560f81b606082015260800190565b60208082526021908201527f566f74696e6753797374656d3a20496e76616c696420656c656374696f6e20496040820152601160fa1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600080835461286381612727565b6001828116801561287b5760018114612890576128bf565b60ff19841687528215158302870194506128bf565b8760005260208060002060005b858110156128b65781548a82015290840190820161289d565b50505082870194505b50929695505050505050565b6000600182016128dd576128dd612761565b5060010190565b601f82111561292e57600081815260208120601f850160051c8101602086101561290b5750805b601f850160051c820191505b8181101561292a57828155600101612917565b5050505b505050565b815167ffffffffffffffff81111561294d5761294d61213b565b6129618161295b8454612727565b846128e4565b602080601f831160018114612996576000841561297e5750858301515b600019600386901b1c1916600185901b17855561292a565b600085815260208120601f198616915b828110156129c5578886015182559484019460019091019084016129a6565b50858210156129e35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612a0660608301866122f1565b60208301949094525060400152919050565b818103818111156116985761169861276156fea264697066735822122079ca2560b4aa078292e28fe7f66788d6f69c475a8889625b460ba281265887a364736f6c63430008130033",
}

// SecureVotingSystemABI is the input ABI used to generate the binding from.
// Deprecated: Use SecureVotingSystemMetaData.ABI instead.
var SecureVotingSystemABI = SecureVotingSystemMetaData.ABI

// SecureVotingSystemBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SecureVotingSystemMetaData.Bin instead.
var SecureVotingSystemBin = SecureVotingSystemMetaData.Bin

// DeploySecureVotingSystem deploys a new Ethereum contract, binding an instance of SecureVotingSystem to it.
func DeploySecureVotingSystem(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SecureVotingSystem, error) {
	parsed, err := SecureVotingSystemMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SecureVotingSystemBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SecureVotingSystem{SecureVotingSystemCaller: SecureVotingSystemCaller{contract: contract}, SecureVotingSystemTransactor: SecureVotingSystemTransactor{contract: contract}, SecureVotingSystemFilterer: SecureVotingSystemFilterer{contract: contract}}, nil
}

// SecureVotingSystem is an auto generated Go binding around an Ethereum contract.
type SecureVotingSystem struct {
	SecureVotingSystemCaller     // Read-only binding to the contract
	SecureVotingSystemTransactor // Write-only binding to the contract
	SecureVotingSystemFilterer   // Log filterer for contract events
}

// SecureVotingSystemCaller is an auto generated read-only Go binding around an Ethereum contract.
type SecureVotingSystemCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecureVotingSystemTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SecureVotingSystemTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecureVotingSystemFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SecureVotingSystemFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecureVotingSystemSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SecureVotingSystemSession struct {
	Contract     *SecureVotingSystem // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SecureVotingSystemCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SecureVotingSystemCallerSession struct {
	Contract *SecureVotingSystemCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// SecureVotingSystemTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SecureVotingSystemTransactorSession struct {
	Contract     *SecureVotingSystemTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// SecureVotingSystemRaw is an auto generated low-level Go binding around an Ethereum contract.
type SecureVotingSystemRaw struct {
	Contract *SecureVotingSystem // Generic contract binding to access the raw methods on
}

// SecureVotingSystemCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SecureVotingSystemCallerRaw struct {
	Contract *SecureVotingSystemCaller // Generic read-only contract binding to access the raw methods on
}

// SecureVotingSystemTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SecureVotingSystemTransactorRaw struct {
	Contract *SecureVotingSystemTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSecureVotingSystem creates a new instance of SecureVotingSystem, bound to a specific deployed contract.
func NewSecureVotingSystem(address common.Address, backend bind.ContractBackend) (*SecureVotingSystem, error) {
	contract, err := bindSecureVotingSystem(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystem{SecureVotingSystemCaller: SecureVotingSystemCaller{contract: contract}, SecureVotingSystemTransactor: SecureVotingSystemTransactor{contract: contract}, SecureVotingSystemFilterer: SecureVotingSystemFilterer{contract: contract}}, nil
}

// NewSecureVotingSystemCaller creates a new read-only instance of SecureVotingSystem, bound to a specific deployed contract.
func NewSecureVotingSystemCaller(address common.Address, caller bind.ContractCaller) (*SecureVotingSystemCaller, error) {
	contract, err := bindSecureVotingSystem(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemCaller{contract: contract}, nil
}

// NewSecureVotingSystemTransactor creates a new write-only instance of SecureVotingSystem, bound to a specific deployed contract.
func NewSecureVotingSystemTransactor(address common.Address, transactor bind.ContractTransactor) (*SecureVotingSystemTransactor, error) {
	contract, err := bindSecureVotingSystem(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemTransactor{contract: contract}, nil
}

// NewSecureVotingSystemFilterer creates a new log filterer instance of SecureVotingSystem, bound to a specific deployed contract.
func NewSecureVotingSystemFilterer(address common.Address, filterer bind.ContractFilterer) (*SecureVotingSystemFilterer, error) {
	contract, err := bindSecureVotingSystem(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemFilterer{contract: contract}, nil
}

// bindSecureVotingSystem binds a generic wrapper to an already deployed contract.
func bindSecureVotingSystem(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SecureVotingSystemMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecureVotingSystem *SecureVotingSystemRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecureVotingSystem.Contract.SecureVotingSystemCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecureVotingSystem *SecureVotingSystemRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.SecureVotingSystemTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecureVotingSystem *SecureVotingSystemRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.SecureVotingSystemTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecureVotingSystem *SecureVotingSystemCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecureVotingSystem.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecureVotingSystem *SecureVotingSystemTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecureVotingSystem *SecureVotingSystemTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.contract.Transact(opts, method, params...)
}

// AuthorizedTerminals is a free data retrieval call binding the contract method 0x4596aee8.
//
// Solidity: function authorizedTerminals(address ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCaller) AuthorizedTerminals(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "authorizedTerminals", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AuthorizedTerminals is a free data retrieval call binding the contract method 0x4596aee8.
//
// Solidity: function authorizedTerminals(address ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemSession) AuthorizedTerminals(arg0 common.Address) (bool, error) {
	return _SecureVotingSystem.Contract.AuthorizedTerminals(&_SecureVotingSystem.CallOpts, arg0)
}

// AuthorizedTerminals is a free data retrieval call binding the contract method 0x4596aee8.
//
// Solidity: function authorizedTerminals(address ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) AuthorizedTerminals(arg0 common.Address) (bool, error) {
	return _SecureVotingSystem.Contract.AuthorizedTerminals(&_SecureVotingSystem.CallOpts, arg0)
}

// CurrentElectionId is a free data retrieval call binding the contract method 0x98ecf2a0.
//
// Solidity: function currentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) CurrentElectionId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "currentElectionId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentElectionId is a free data retrieval call binding the contract method 0x98ecf2a0.
//
// Solidity: function currentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) CurrentElectionId() (*big.Int, error) {
	return _SecureVotingSystem.Contract.CurrentElectionId(&_SecureVotingSystem.CallOpts)
}

// CurrentElectionId is a free data retrieval call binding the contract method 0x98ecf2a0.
//
// Solidity: function currentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) CurrentElectionId() (*big.Int, error) {
	return _SecureVotingSystem.Contract.CurrentElectionId(&_SecureVotingSystem.CallOpts)
}

// ElectionResults is a free data retrieval call binding the contract method 0x73ed31a3.
//
// Solidity: function electionResults(uint256 , string ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) ElectionResults(opts *bind.CallOpts, arg0 *big.Int, arg1 string) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "electionResults", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ElectionResults is a free data retrieval call binding the contract method 0x73ed31a3.
//
// Solidity: function electionResults(uint256 , string ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) ElectionResults(arg0 *big.Int, arg1 string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.ElectionResults(&_SecureVotingSystem.CallOpts, arg0, arg1)
}

// ElectionResults is a free data retrieval call binding the contract method 0x73ed31a3.
//
// Solidity: function electionResults(uint256 , string ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) ElectionResults(arg0 *big.Int, arg1 string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.ElectionResults(&_SecureVotingSystem.CallOpts, arg0, arg1)
}

// Elections is a free data retrieval call binding the contract method 0x5e6fef01.
//
// Solidity: function elections(uint256 ) view returns(uint256 id, string name, uint256 startTime, uint256 endTime, bool isActive, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemCaller) Elections(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id         *big.Int
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	TotalVotes *big.Int
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "elections", arg0)

	outstruct := new(struct {
		Id         *big.Int
		Name       string
		StartTime  *big.Int
		EndTime    *big.Int
		IsActive   bool
		TotalVotes *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.StartTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.IsActive = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.TotalVotes = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Elections is a free data retrieval call binding the contract method 0x5e6fef01.
//
// Solidity: function elections(uint256 ) view returns(uint256 id, string name, uint256 startTime, uint256 endTime, bool isActive, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemSession) Elections(arg0 *big.Int) (struct {
	Id         *big.Int
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	TotalVotes *big.Int
}, error) {
	return _SecureVotingSystem.Contract.Elections(&_SecureVotingSystem.CallOpts, arg0)
}

// Elections is a free data retrieval call binding the contract method 0x5e6fef01.
//
// Solidity: function elections(uint256 ) view returns(uint256 id, string name, uint256 startTime, uint256 endTime, bool isActive, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) Elections(arg0 *big.Int) (struct {
	Id         *big.Int
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	TotalVotes *big.Int
}, error) {
	return _SecureVotingSystem.Contract.Elections(&_SecureVotingSystem.CallOpts, arg0)
}

// GetCurrentElectionId is a free data retrieval call binding the contract method 0xfe2b536b.
//
// Solidity: function getCurrentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetCurrentElectionId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getCurrentElectionId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentElectionId is a free data retrieval call binding the contract method 0xfe2b536b.
//
// Solidity: function getCurrentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetCurrentElectionId() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetCurrentElectionId(&_SecureVotingSystem.CallOpts)
}

// GetCurrentElectionId is a free data retrieval call binding the contract method 0xfe2b536b.
//
// Solidity: function getCurrentElectionId() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetCurrentElectionId() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetCurrentElectionId(&_SecureVotingSystem.CallOpts)
}

// GetElectionDetails is a free data retrieval call binding the contract method 0xf6049924.
//
// Solidity: function getElectionDetails(uint256 _electionId) view returns(string name, uint256 startTime, uint256 endTime, bool isActive, string[] candidates, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetElectionDetails(opts *bind.CallOpts, _electionId *big.Int) (struct {
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	Candidates []string
	TotalVotes *big.Int
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getElectionDetails", _electionId)

	outstruct := new(struct {
		Name       string
		StartTime  *big.Int
		EndTime    *big.Int
		IsActive   bool
		Candidates []string
		TotalVotes *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.StartTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.IsActive = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.Candidates = *abi.ConvertType(out[4], new([]string)).(*[]string)
	outstruct.TotalVotes = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetElectionDetails is a free data retrieval call binding the contract method 0xf6049924.
//
// Solidity: function getElectionDetails(uint256 _electionId) view returns(string name, uint256 startTime, uint256 endTime, bool isActive, string[] candidates, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemSession) GetElectionDetails(_electionId *big.Int) (struct {
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	Candidates []string
	TotalVotes *big.Int
}, error) {
	return _SecureVotingSystem.Contract.GetElectionDetails(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetElectionDetails is a free data retrieval call binding the contract method 0xf6049924.
//
// Solidity: function getElectionDetails(uint256 _electionId) view returns(string name, uint256 startTime, uint256 endTime, bool isActive, string[] candidates, uint256 totalVotes)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetElectionDetails(_electionId *big.Int) (struct {
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	IsActive   bool
	Candidates []string
	TotalVotes *big.Int
}, error) {
	return _SecureVotingSystem.Contract.GetElectionDetails(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetElectionResults is a free data retrieval call binding the contract method 0xf67c7d06.
//
// Solidity: function getElectionResults(uint256 _electionId, string _candidateId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetElectionResults(opts *bind.CallOpts, _electionId *big.Int, _candidateId string) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getElectionResults", _electionId, _candidateId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetElectionResults is a free data retrieval call binding the contract method 0xf67c7d06.
//
// Solidity: function getElectionResults(uint256 _electionId, string _candidateId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetElectionResults(_electionId *big.Int, _candidateId string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetElectionResults(&_SecureVotingSystem.CallOpts, _electionId, _candidateId)
}

// GetElectionResults is a free data retrieval call binding the contract method 0xf67c7d06.
//
// Solidity: function getElectionResults(uint256 _electionId, string _candidateId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetElectionResults(_electionId *big.Int, _candidateId string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetElectionResults(&_SecureVotingSystem.CallOpts, _electionId, _candidateId)
}

// GetElectionStatistics is a free data retrieval call binding the contract method 0xe8b20ad7.
//
// Solidity: function getElectionStatistics(uint256 _electionId) view returns(uint256 totalVotes, uint256 validVotes, uint256 invalidVotes, uint256 duration, bool isCompleted)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetElectionStatistics(opts *bind.CallOpts, _electionId *big.Int) (struct {
	TotalVotes   *big.Int
	ValidVotes   *big.Int
	InvalidVotes *big.Int
	Duration     *big.Int
	IsCompleted  bool
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getElectionStatistics", _electionId)

	outstruct := new(struct {
		TotalVotes   *big.Int
		ValidVotes   *big.Int
		InvalidVotes *big.Int
		Duration     *big.Int
		IsCompleted  bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalVotes = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ValidVotes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.InvalidVotes = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.IsCompleted = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// GetElectionStatistics is a free data retrieval call binding the contract method 0xe8b20ad7.
//
// Solidity: function getElectionStatistics(uint256 _electionId) view returns(uint256 totalVotes, uint256 validVotes, uint256 invalidVotes, uint256 duration, bool isCompleted)
func (_SecureVotingSystem *SecureVotingSystemSession) GetElectionStatistics(_electionId *big.Int) (struct {
	TotalVotes   *big.Int
	ValidVotes   *big.Int
	InvalidVotes *big.Int
	Duration     *big.Int
	IsCompleted  bool
}, error) {
	return _SecureVotingSystem.Contract.GetElectionStatistics(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetElectionStatistics is a free data retrieval call binding the contract method 0xe8b20ad7.
//
// Solidity: function getElectionStatistics(uint256 _electionId) view returns(uint256 totalVotes, uint256 validVotes, uint256 invalidVotes, uint256 duration, bool isCompleted)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetElectionStatistics(_electionId *big.Int) (struct {
	TotalVotes   *big.Int
	ValidVotes   *big.Int
	InvalidVotes *big.Int
	Duration     *big.Int
	IsCompleted  bool
}, error) {
	return _SecureVotingSystem.Contract.GetElectionStatistics(&_SecureVotingSystem.CallOpts, _electionId)
}

// GetPollingUnitVoteCount is a free data retrieval call binding the contract method 0xd293eb3b.
//
// Solidity: function getPollingUnitVoteCount(string _pollingUnitId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetPollingUnitVoteCount(opts *bind.CallOpts, _pollingUnitId string) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getPollingUnitVoteCount", _pollingUnitId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPollingUnitVoteCount is a free data retrieval call binding the contract method 0xd293eb3b.
//
// Solidity: function getPollingUnitVoteCount(string _pollingUnitId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetPollingUnitVoteCount(_pollingUnitId string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetPollingUnitVoteCount(&_SecureVotingSystem.CallOpts, _pollingUnitId)
}

// GetPollingUnitVoteCount is a free data retrieval call binding the contract method 0xd293eb3b.
//
// Solidity: function getPollingUnitVoteCount(string _pollingUnitId) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetPollingUnitVoteCount(_pollingUnitId string) (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetPollingUnitVoteCount(&_SecureVotingSystem.CallOpts, _pollingUnitId)
}

// GetTotalElections is a free data retrieval call binding the contract method 0xa9392e0c.
//
// Solidity: function getTotalElections() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetTotalElections(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getTotalElections")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalElections is a free data retrieval call binding the contract method 0xa9392e0c.
//
// Solidity: function getTotalElections() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetTotalElections() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetTotalElections(&_SecureVotingSystem.CallOpts)
}

// GetTotalElections is a free data retrieval call binding the contract method 0xa9392e0c.
//
// Solidity: function getTotalElections() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetTotalElections() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetTotalElections(&_SecureVotingSystem.CallOpts)
}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetTotalVotes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getTotalVotes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) GetTotalVotes() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetTotalVotes(&_SecureVotingSystem.CallOpts)
}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetTotalVotes() (*big.Int, error) {
	return _SecureVotingSystem.Contract.GetTotalVotes(&_SecureVotingSystem.CallOpts)
}

// GetVoteDetails is a free data retrieval call binding the contract method 0x54a1b431.
//
// Solidity: function getVoteDetails(uint256 _voteId) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemCaller) GetVoteDetails(opts *bind.CallOpts, _voteId *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getVoteDetails", _voteId)

	outstruct := new(struct {
		VerificationHash [32]byte
		EncryptedVote    [32]byte
		Timestamp        *big.Int
		PollingUnitId    string
		ElectionId       *big.Int
		IsValid          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.VerificationHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.EncryptedVote = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Timestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PollingUnitId = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ElectionId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.IsValid = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// GetVoteDetails is a free data retrieval call binding the contract method 0x54a1b431.
//
// Solidity: function getVoteDetails(uint256 _voteId) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemSession) GetVoteDetails(_voteId *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	return _SecureVotingSystem.Contract.GetVoteDetails(&_SecureVotingSystem.CallOpts, _voteId)
}

// GetVoteDetails is a free data retrieval call binding the contract method 0x54a1b431.
//
// Solidity: function getVoteDetails(uint256 _voteId) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetVoteDetails(_voteId *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	return _SecureVotingSystem.Contract.GetVoteDetails(&_SecureVotingSystem.CallOpts, _voteId)
}

// GetVotesByTimeRange is a free data retrieval call binding the contract method 0x73b93c34.
//
// Solidity: function getVotesByTimeRange(uint256 _startTime, uint256 _endTime) view returns(uint256[])
func (_SecureVotingSystem *SecureVotingSystemCaller) GetVotesByTimeRange(opts *bind.CallOpts, _startTime *big.Int, _endTime *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "getVotesByTimeRange", _startTime, _endTime)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetVotesByTimeRange is a free data retrieval call binding the contract method 0x73b93c34.
//
// Solidity: function getVotesByTimeRange(uint256 _startTime, uint256 _endTime) view returns(uint256[])
func (_SecureVotingSystem *SecureVotingSystemSession) GetVotesByTimeRange(_startTime *big.Int, _endTime *big.Int) ([]*big.Int, error) {
	return _SecureVotingSystem.Contract.GetVotesByTimeRange(&_SecureVotingSystem.CallOpts, _startTime, _endTime)
}

// GetVotesByTimeRange is a free data retrieval call binding the contract method 0x73b93c34.
//
// Solidity: function getVotesByTimeRange(uint256 _startTime, uint256 _endTime) view returns(uint256[])
func (_SecureVotingSystem *SecureVotingSystemCallerSession) GetVotesByTimeRange(_startTime *big.Int, _endTime *big.Int) ([]*big.Int, error) {
	return _SecureVotingSystem.Contract.GetVotesByTimeRange(&_SecureVotingSystem.CallOpts, _startTime, _endTime)
}

// HasVoted is a free data retrieval call binding the contract method 0x1b4613cb.
//
// Solidity: function hasVoted(bytes32 ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCaller) HasVoted(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "hasVoted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVoted is a free data retrieval call binding the contract method 0x1b4613cb.
//
// Solidity: function hasVoted(bytes32 ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemSession) HasVoted(arg0 [32]byte) (bool, error) {
	return _SecureVotingSystem.Contract.HasVoted(&_SecureVotingSystem.CallOpts, arg0)
}

// HasVoted is a free data retrieval call binding the contract method 0x1b4613cb.
//
// Solidity: function hasVoted(bytes32 ) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) HasVoted(arg0 [32]byte) (bool, error) {
	return _SecureVotingSystem.Contract.HasVoted(&_SecureVotingSystem.CallOpts, arg0)
}

// HasVoterVoted is a free data retrieval call binding the contract method 0xc91d60ed.
//
// Solidity: function hasVoterVoted(bytes32 _verificationHash) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCaller) HasVoterVoted(opts *bind.CallOpts, _verificationHash [32]byte) (bool, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "hasVoterVoted", _verificationHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVoterVoted is a free data retrieval call binding the contract method 0xc91d60ed.
//
// Solidity: function hasVoterVoted(bytes32 _verificationHash) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemSession) HasVoterVoted(_verificationHash [32]byte) (bool, error) {
	return _SecureVotingSystem.Contract.HasVoterVoted(&_SecureVotingSystem.CallOpts, _verificationHash)
}

// HasVoterVoted is a free data retrieval call binding the contract method 0xc91d60ed.
//
// Solidity: function hasVoterVoted(bytes32 _verificationHash) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) HasVoterVoted(_verificationHash [32]byte) (bool, error) {
	return _SecureVotingSystem.Contract.HasVoterVoted(&_SecureVotingSystem.CallOpts, _verificationHash)
}

// IsTerminalAuthorized is a free data retrieval call binding the contract method 0x184acbab.
//
// Solidity: function isTerminalAuthorized(address _terminal) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCaller) IsTerminalAuthorized(opts *bind.CallOpts, _terminal common.Address) (bool, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "isTerminalAuthorized", _terminal)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTerminalAuthorized is a free data retrieval call binding the contract method 0x184acbab.
//
// Solidity: function isTerminalAuthorized(address _terminal) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemSession) IsTerminalAuthorized(_terminal common.Address) (bool, error) {
	return _SecureVotingSystem.Contract.IsTerminalAuthorized(&_SecureVotingSystem.CallOpts, _terminal)
}

// IsTerminalAuthorized is a free data retrieval call binding the contract method 0x184acbab.
//
// Solidity: function isTerminalAuthorized(address _terminal) view returns(bool)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) IsTerminalAuthorized(_terminal common.Address) (bool, error) {
	return _SecureVotingSystem.Contract.IsTerminalAuthorized(&_SecureVotingSystem.CallOpts, _terminal)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecureVotingSystem *SecureVotingSystemCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecureVotingSystem *SecureVotingSystemSession) Owner() (common.Address, error) {
	return _SecureVotingSystem.Contract.Owner(&_SecureVotingSystem.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) Owner() (common.Address, error) {
	return _SecureVotingSystem.Contract.Owner(&_SecureVotingSystem.CallOpts)
}

// PollingUnits is a free data retrieval call binding the contract method 0x374904b2.
//
// Solidity: function pollingUnits(string ) view returns(string id, string name, string location, uint256 totalVoters, uint256 votesRecorded, bool isActive)
func (_SecureVotingSystem *SecureVotingSystemCaller) PollingUnits(opts *bind.CallOpts, arg0 string) (struct {
	Id            string
	Name          string
	Location      string
	TotalVoters   *big.Int
	VotesRecorded *big.Int
	IsActive      bool
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "pollingUnits", arg0)

	outstruct := new(struct {
		Id            string
		Name          string
		Location      string
		TotalVoters   *big.Int
		VotesRecorded *big.Int
		IsActive      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Location = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.TotalVoters = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VotesRecorded = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.IsActive = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// PollingUnits is a free data retrieval call binding the contract method 0x374904b2.
//
// Solidity: function pollingUnits(string ) view returns(string id, string name, string location, uint256 totalVoters, uint256 votesRecorded, bool isActive)
func (_SecureVotingSystem *SecureVotingSystemSession) PollingUnits(arg0 string) (struct {
	Id            string
	Name          string
	Location      string
	TotalVoters   *big.Int
	VotesRecorded *big.Int
	IsActive      bool
}, error) {
	return _SecureVotingSystem.Contract.PollingUnits(&_SecureVotingSystem.CallOpts, arg0)
}

// PollingUnits is a free data retrieval call binding the contract method 0x374904b2.
//
// Solidity: function pollingUnits(string ) view returns(string id, string name, string location, uint256 totalVoters, uint256 votesRecorded, bool isActive)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) PollingUnits(arg0 string) (struct {
	Id            string
	Name          string
	Location      string
	TotalVoters   *big.Int
	VotesRecorded *big.Int
	IsActive      bool
}, error) {
	return _SecureVotingSystem.Contract.PollingUnits(&_SecureVotingSystem.CallOpts, arg0)
}

// VerificationHashToVoteId is a free data retrieval call binding the contract method 0x8dc41911.
//
// Solidity: function verificationHashToVoteId(bytes32 ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCaller) VerificationHashToVoteId(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "verificationHashToVoteId", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VerificationHashToVoteId is a free data retrieval call binding the contract method 0x8dc41911.
//
// Solidity: function verificationHashToVoteId(bytes32 ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) VerificationHashToVoteId(arg0 [32]byte) (*big.Int, error) {
	return _SecureVotingSystem.Contract.VerificationHashToVoteId(&_SecureVotingSystem.CallOpts, arg0)
}

// VerificationHashToVoteId is a free data retrieval call binding the contract method 0x8dc41911.
//
// Solidity: function verificationHashToVoteId(bytes32 ) view returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) VerificationHashToVoteId(arg0 [32]byte) (*big.Int, error) {
	return _SecureVotingSystem.Contract.VerificationHashToVoteId(&_SecureVotingSystem.CallOpts, arg0)
}

// Votes is a free data retrieval call binding the contract method 0x5df81330.
//
// Solidity: function votes(uint256 ) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemCaller) Votes(opts *bind.CallOpts, arg0 *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	var out []interface{}
	err := _SecureVotingSystem.contract.Call(opts, &out, "votes", arg0)

	outstruct := new(struct {
		VerificationHash [32]byte
		EncryptedVote    [32]byte
		Timestamp        *big.Int
		PollingUnitId    string
		ElectionId       *big.Int
		IsValid          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.VerificationHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.EncryptedVote = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Timestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PollingUnitId = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ElectionId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.IsValid = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// Votes is a free data retrieval call binding the contract method 0x5df81330.
//
// Solidity: function votes(uint256 ) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemSession) Votes(arg0 *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	return _SecureVotingSystem.Contract.Votes(&_SecureVotingSystem.CallOpts, arg0)
}

// Votes is a free data retrieval call binding the contract method 0x5df81330.
//
// Solidity: function votes(uint256 ) view returns(bytes32 verificationHash, bytes32 encryptedVote, uint256 timestamp, string pollingUnitId, uint256 electionId, bool isValid)
func (_SecureVotingSystem *SecureVotingSystemCallerSession) Votes(arg0 *big.Int) (struct {
	VerificationHash [32]byte
	EncryptedVote    [32]byte
	Timestamp        *big.Int
	PollingUnitId    string
	ElectionId       *big.Int
	IsValid          bool
}, error) {
	return _SecureVotingSystem.Contract.Votes(&_SecureVotingSystem.CallOpts, arg0)
}

// AuthorizeTerminal is a paid mutator transaction binding the contract method 0xe744cf91.
//
// Solidity: function authorizeTerminal(address _terminal, bool _status) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) AuthorizeTerminal(opts *bind.TransactOpts, _terminal common.Address, _status bool) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "authorizeTerminal", _terminal, _status)
}

// AuthorizeTerminal is a paid mutator transaction binding the contract method 0xe744cf91.
//
// Solidity: function authorizeTerminal(address _terminal, bool _status) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) AuthorizeTerminal(_terminal common.Address, _status bool) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.AuthorizeTerminal(&_SecureVotingSystem.TransactOpts, _terminal, _status)
}

// AuthorizeTerminal is a paid mutator transaction binding the contract method 0xe744cf91.
//
// Solidity: function authorizeTerminal(address _terminal, bool _status) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) AuthorizeTerminal(_terminal common.Address, _status bool) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.AuthorizeTerminal(&_SecureVotingSystem.TransactOpts, _terminal, _status)
}

// CastVote is a paid mutator transaction binding the contract method 0x710f750c.
//
// Solidity: function castVote(bytes32 _verificationHash, bytes32 _encryptedVote, string _pollingUnitId, string _candidateId) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemTransactor) CastVote(opts *bind.TransactOpts, _verificationHash [32]byte, _encryptedVote [32]byte, _pollingUnitId string, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "castVote", _verificationHash, _encryptedVote, _pollingUnitId, _candidateId)
}

// CastVote is a paid mutator transaction binding the contract method 0x710f750c.
//
// Solidity: function castVote(bytes32 _verificationHash, bytes32 _encryptedVote, string _pollingUnitId, string _candidateId) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) CastVote(_verificationHash [32]byte, _encryptedVote [32]byte, _pollingUnitId string, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.CastVote(&_SecureVotingSystem.TransactOpts, _verificationHash, _encryptedVote, _pollingUnitId, _candidateId)
}

// CastVote is a paid mutator transaction binding the contract method 0x710f750c.
//
// Solidity: function castVote(bytes32 _verificationHash, bytes32 _encryptedVote, string _pollingUnitId, string _candidateId) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) CastVote(_verificationHash [32]byte, _encryptedVote [32]byte, _pollingUnitId string, _candidateId string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.CastVote(&_SecureVotingSystem.TransactOpts, _verificationHash, _encryptedVote, _pollingUnitId, _candidateId)
}

// CreateElection is a paid mutator transaction binding the contract method 0xbc279047.
//
// Solidity: function createElection(string _name, uint256 _startTime, uint256 _endTime, string[] _candidates) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemTransactor) CreateElection(opts *bind.TransactOpts, _name string, _startTime *big.Int, _endTime *big.Int, _candidates []string) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "createElection", _name, _startTime, _endTime, _candidates)
}

// CreateElection is a paid mutator transaction binding the contract method 0xbc279047.
//
// Solidity: function createElection(string _name, uint256 _startTime, uint256 _endTime, string[] _candidates) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemSession) CreateElection(_name string, _startTime *big.Int, _endTime *big.Int, _candidates []string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.CreateElection(&_SecureVotingSystem.TransactOpts, _name, _startTime, _endTime, _candidates)
}

// CreateElection is a paid mutator transaction binding the contract method 0xbc279047.
//
// Solidity: function createElection(string _name, uint256 _startTime, uint256 _endTime, string[] _candidates) returns(uint256)
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) CreateElection(_name string, _startTime *big.Int, _endTime *big.Int, _candidates []string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.CreateElection(&_SecureVotingSystem.TransactOpts, _name, _startTime, _endTime, _candidates)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) EmergencyPause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "emergencyPause")
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_SecureVotingSystem *SecureVotingSystemSession) EmergencyPause() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.EmergencyPause(&_SecureVotingSystem.TransactOpts)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) EmergencyPause() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.EmergencyPause(&_SecureVotingSystem.TransactOpts)
}

// EndElection is a paid mutator transaction binding the contract method 0x59f78468.
//
// Solidity: function endElection() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) EndElection(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "endElection")
}

// EndElection is a paid mutator transaction binding the contract method 0x59f78468.
//
// Solidity: function endElection() returns()
func (_SecureVotingSystem *SecureVotingSystemSession) EndElection() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.EndElection(&_SecureVotingSystem.TransactOpts)
}

// EndElection is a paid mutator transaction binding the contract method 0x59f78468.
//
// Solidity: function endElection() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) EndElection() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.EndElection(&_SecureVotingSystem.TransactOpts)
}

// InvalidateVote is a paid mutator transaction binding the contract method 0x10fc46b3.
//
// Solidity: function invalidateVote(uint256 _voteId, string _reason) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) InvalidateVote(opts *bind.TransactOpts, _voteId *big.Int, _reason string) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "invalidateVote", _voteId, _reason)
}

// InvalidateVote is a paid mutator transaction binding the contract method 0x10fc46b3.
//
// Solidity: function invalidateVote(uint256 _voteId, string _reason) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) InvalidateVote(_voteId *big.Int, _reason string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.InvalidateVote(&_SecureVotingSystem.TransactOpts, _voteId, _reason)
}

// InvalidateVote is a paid mutator transaction binding the contract method 0x10fc46b3.
//
// Solidity: function invalidateVote(uint256 _voteId, string _reason) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) InvalidateVote(_voteId *big.Int, _reason string) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.InvalidateVote(&_SecureVotingSystem.TransactOpts, _voteId, _reason)
}

// RegisterPollingUnit is a paid mutator transaction binding the contract method 0xf42afb90.
//
// Solidity: function registerPollingUnit(string _pollingUnitId, string _name, string _location, uint256 _totalVoters) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) RegisterPollingUnit(opts *bind.TransactOpts, _pollingUnitId string, _name string, _location string, _totalVoters *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "registerPollingUnit", _pollingUnitId, _name, _location, _totalVoters)
}

// RegisterPollingUnit is a paid mutator transaction binding the contract method 0xf42afb90.
//
// Solidity: function registerPollingUnit(string _pollingUnitId, string _name, string _location, uint256 _totalVoters) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) RegisterPollingUnit(_pollingUnitId string, _name string, _location string, _totalVoters *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RegisterPollingUnit(&_SecureVotingSystem.TransactOpts, _pollingUnitId, _name, _location, _totalVoters)
}

// RegisterPollingUnit is a paid mutator transaction binding the contract method 0xf42afb90.
//
// Solidity: function registerPollingUnit(string _pollingUnitId, string _name, string _location, uint256 _totalVoters) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) RegisterPollingUnit(_pollingUnitId string, _name string, _location string, _totalVoters *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RegisterPollingUnit(&_SecureVotingSystem.TransactOpts, _pollingUnitId, _name, _location, _totalVoters)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecureVotingSystem *SecureVotingSystemSession) RenounceOwnership() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RenounceOwnership(&_SecureVotingSystem.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.RenounceOwnership(&_SecureVotingSystem.TransactOpts)
}

// StartElection is a paid mutator transaction binding the contract method 0x6d32dc4b.
//
// Solidity: function startElection(uint256 _electionId) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) StartElection(opts *bind.TransactOpts, _electionId *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "startElection", _electionId)
}

// StartElection is a paid mutator transaction binding the contract method 0x6d32dc4b.
//
// Solidity: function startElection(uint256 _electionId) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) StartElection(_electionId *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.StartElection(&_SecureVotingSystem.TransactOpts, _electionId)
}

// StartElection is a paid mutator transaction binding the contract method 0x6d32dc4b.
//
// Solidity: function startElection(uint256 _electionId) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) StartElection(_electionId *big.Int) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.StartElection(&_SecureVotingSystem.TransactOpts, _electionId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SecureVotingSystem.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecureVotingSystem *SecureVotingSystemSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.TransferOwnership(&_SecureVotingSystem.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecureVotingSystem *SecureVotingSystemTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SecureVotingSystem.Contract.TransferOwnership(&_SecureVotingSystem.TransactOpts, newOwner)
}

// SecureVotingSystemElectionCreatedIterator is returned from FilterElectionCreated and is used to iterate over the raw logs and unpacked data for ElectionCreated events raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionCreatedIterator struct {
	Event *SecureVotingSystemElectionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemElectionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemElectionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemElectionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemElectionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemElectionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemElectionCreated represents a ElectionCreated event raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionCreated struct {
	ElectionId *big.Int
	Name       string
	StartTime  *big.Int
	EndTime    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterElectionCreated is a free log retrieval operation binding the contract event 0xe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9.
//
// Solidity: event ElectionCreated(uint256 indexed electionId, string name, uint256 startTime, uint256 endTime)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterElectionCreated(opts *bind.FilterOpts, electionId []*big.Int) (*SecureVotingSystemElectionCreatedIterator, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "ElectionCreated", electionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemElectionCreatedIterator{contract: _SecureVotingSystem.contract, event: "ElectionCreated", logs: logs, sub: sub}, nil
}

// WatchElectionCreated is a free log subscription operation binding the contract event 0xe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9.
//
// Solidity: event ElectionCreated(uint256 indexed electionId, string name, uint256 startTime, uint256 endTime)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchElectionCreated(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemElectionCreated, electionId []*big.Int) (event.Subscription, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "ElectionCreated", electionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemElectionCreated)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseElectionCreated is a log parse operation binding the contract event 0xe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9.
//
// Solidity: event ElectionCreated(uint256 indexed electionId, string name, uint256 startTime, uint256 endTime)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseElectionCreated(log types.Log) (*SecureVotingSystemElectionCreated, error) {
	event := new(SecureVotingSystemElectionCreated)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemElectionEndedIterator is returned from FilterElectionEnded and is used to iterate over the raw logs and unpacked data for ElectionEnded events raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionEndedIterator struct {
	Event *SecureVotingSystemElectionEnded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemElectionEndedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemElectionEnded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemElectionEnded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemElectionEndedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemElectionEndedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemElectionEnded represents a ElectionEnded event raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionEnded struct {
	ElectionId *big.Int
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterElectionEnded is a free log retrieval operation binding the contract event 0x32e2c12037f9600b91a766ce53eab6909f3bdb865851cd9a8c7fafbdf249a9ce.
//
// Solidity: event ElectionEnded(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterElectionEnded(opts *bind.FilterOpts, electionId []*big.Int) (*SecureVotingSystemElectionEndedIterator, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "ElectionEnded", electionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemElectionEndedIterator{contract: _SecureVotingSystem.contract, event: "ElectionEnded", logs: logs, sub: sub}, nil
}

// WatchElectionEnded is a free log subscription operation binding the contract event 0x32e2c12037f9600b91a766ce53eab6909f3bdb865851cd9a8c7fafbdf249a9ce.
//
// Solidity: event ElectionEnded(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchElectionEnded(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemElectionEnded, electionId []*big.Int) (event.Subscription, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "ElectionEnded", electionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemElectionEnded)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionEnded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseElectionEnded is a log parse operation binding the contract event 0x32e2c12037f9600b91a766ce53eab6909f3bdb865851cd9a8c7fafbdf249a9ce.
//
// Solidity: event ElectionEnded(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseElectionEnded(log types.Log) (*SecureVotingSystemElectionEnded, error) {
	event := new(SecureVotingSystemElectionEnded)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionEnded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemElectionStartedIterator is returned from FilterElectionStarted and is used to iterate over the raw logs and unpacked data for ElectionStarted events raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionStartedIterator struct {
	Event *SecureVotingSystemElectionStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemElectionStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemElectionStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemElectionStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemElectionStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemElectionStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemElectionStarted represents a ElectionStarted event raised by the SecureVotingSystem contract.
type SecureVotingSystemElectionStarted struct {
	ElectionId *big.Int
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterElectionStarted is a free log retrieval operation binding the contract event 0xff6a30dd22f5e8b783044c7d895a6e8592b55c56f139978d44dc39daf596731f.
//
// Solidity: event ElectionStarted(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterElectionStarted(opts *bind.FilterOpts, electionId []*big.Int) (*SecureVotingSystemElectionStartedIterator, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "ElectionStarted", electionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemElectionStartedIterator{contract: _SecureVotingSystem.contract, event: "ElectionStarted", logs: logs, sub: sub}, nil
}

// WatchElectionStarted is a free log subscription operation binding the contract event 0xff6a30dd22f5e8b783044c7d895a6e8592b55c56f139978d44dc39daf596731f.
//
// Solidity: event ElectionStarted(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchElectionStarted(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemElectionStarted, electionId []*big.Int) (event.Subscription, error) {

	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "ElectionStarted", electionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemElectionStarted)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseElectionStarted is a log parse operation binding the contract event 0xff6a30dd22f5e8b783044c7d895a6e8592b55c56f139978d44dc39daf596731f.
//
// Solidity: event ElectionStarted(uint256 indexed electionId, uint256 timestamp)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseElectionStarted(log types.Log) (*SecureVotingSystemElectionStarted, error) {
	event := new(SecureVotingSystemElectionStarted)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "ElectionStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SecureVotingSystem contract.
type SecureVotingSystemOwnershipTransferredIterator struct {
	Event *SecureVotingSystemOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemOwnershipTransferred represents a OwnershipTransferred event raised by the SecureVotingSystem contract.
type SecureVotingSystemOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SecureVotingSystemOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemOwnershipTransferredIterator{contract: _SecureVotingSystem.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemOwnershipTransferred)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseOwnershipTransferred(log types.Log) (*SecureVotingSystemOwnershipTransferred, error) {
	event := new(SecureVotingSystemOwnershipTransferred)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemPollingUnitRegisteredIterator is returned from FilterPollingUnitRegistered and is used to iterate over the raw logs and unpacked data for PollingUnitRegistered events raised by the SecureVotingSystem contract.
type SecureVotingSystemPollingUnitRegisteredIterator struct {
	Event *SecureVotingSystemPollingUnitRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemPollingUnitRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemPollingUnitRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemPollingUnitRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemPollingUnitRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemPollingUnitRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemPollingUnitRegistered represents a PollingUnitRegistered event raised by the SecureVotingSystem contract.
type SecureVotingSystemPollingUnitRegistered struct {
	PollingUnitId common.Hash
	Name          string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPollingUnitRegistered is a free log retrieval operation binding the contract event 0xb4fbf858aaf58f916976b6c4668154c1e069b7abc44972f310db304359cf28ce.
//
// Solidity: event PollingUnitRegistered(string indexed pollingUnitId, string name)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterPollingUnitRegistered(opts *bind.FilterOpts, pollingUnitId []string) (*SecureVotingSystemPollingUnitRegisteredIterator, error) {

	var pollingUnitIdRule []interface{}
	for _, pollingUnitIdItem := range pollingUnitId {
		pollingUnitIdRule = append(pollingUnitIdRule, pollingUnitIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "PollingUnitRegistered", pollingUnitIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemPollingUnitRegisteredIterator{contract: _SecureVotingSystem.contract, event: "PollingUnitRegistered", logs: logs, sub: sub}, nil
}

// WatchPollingUnitRegistered is a free log subscription operation binding the contract event 0xb4fbf858aaf58f916976b6c4668154c1e069b7abc44972f310db304359cf28ce.
//
// Solidity: event PollingUnitRegistered(string indexed pollingUnitId, string name)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchPollingUnitRegistered(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemPollingUnitRegistered, pollingUnitId []string) (event.Subscription, error) {

	var pollingUnitIdRule []interface{}
	for _, pollingUnitIdItem := range pollingUnitId {
		pollingUnitIdRule = append(pollingUnitIdRule, pollingUnitIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "PollingUnitRegistered", pollingUnitIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemPollingUnitRegistered)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "PollingUnitRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePollingUnitRegistered is a log parse operation binding the contract event 0xb4fbf858aaf58f916976b6c4668154c1e069b7abc44972f310db304359cf28ce.
//
// Solidity: event PollingUnitRegistered(string indexed pollingUnitId, string name)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParsePollingUnitRegistered(log types.Log) (*SecureVotingSystemPollingUnitRegistered, error) {
	event := new(SecureVotingSystemPollingUnitRegistered)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "PollingUnitRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemTerminalAuthorizedIterator is returned from FilterTerminalAuthorized and is used to iterate over the raw logs and unpacked data for TerminalAuthorized events raised by the SecureVotingSystem contract.
type SecureVotingSystemTerminalAuthorizedIterator struct {
	Event *SecureVotingSystemTerminalAuthorized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemTerminalAuthorizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemTerminalAuthorized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemTerminalAuthorized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemTerminalAuthorizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemTerminalAuthorizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemTerminalAuthorized represents a TerminalAuthorized event raised by the SecureVotingSystem contract.
type SecureVotingSystemTerminalAuthorized struct {
	Terminal common.Address
	Status   bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTerminalAuthorized is a free log retrieval operation binding the contract event 0x1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0.
//
// Solidity: event TerminalAuthorized(address indexed terminal, bool status)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterTerminalAuthorized(opts *bind.FilterOpts, terminal []common.Address) (*SecureVotingSystemTerminalAuthorizedIterator, error) {

	var terminalRule []interface{}
	for _, terminalItem := range terminal {
		terminalRule = append(terminalRule, terminalItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "TerminalAuthorized", terminalRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemTerminalAuthorizedIterator{contract: _SecureVotingSystem.contract, event: "TerminalAuthorized", logs: logs, sub: sub}, nil
}

// WatchTerminalAuthorized is a free log subscription operation binding the contract event 0x1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0.
//
// Solidity: event TerminalAuthorized(address indexed terminal, bool status)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchTerminalAuthorized(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemTerminalAuthorized, terminal []common.Address) (event.Subscription, error) {

	var terminalRule []interface{}
	for _, terminalItem := range terminal {
		terminalRule = append(terminalRule, terminalItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "TerminalAuthorized", terminalRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemTerminalAuthorized)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "TerminalAuthorized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTerminalAuthorized is a log parse operation binding the contract event 0x1a857e9c86aef24412514088ba2a182be80f1f8578455e99e91a32f26f079ac0.
//
// Solidity: event TerminalAuthorized(address indexed terminal, bool status)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseTerminalAuthorized(log types.Log) (*SecureVotingSystemTerminalAuthorized, error) {
	event := new(SecureVotingSystemTerminalAuthorized)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "TerminalAuthorized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemVoteCastIterator is returned from FilterVoteCast and is used to iterate over the raw logs and unpacked data for VoteCast events raised by the SecureVotingSystem contract.
type SecureVotingSystemVoteCastIterator struct {
	Event *SecureVotingSystemVoteCast // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemVoteCastIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemVoteCast)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemVoteCast)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemVoteCastIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemVoteCastIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemVoteCast represents a VoteCast event raised by the SecureVotingSystem contract.
type SecureVotingSystemVoteCast struct {
	VerificationHash [32]byte
	PollingUnitId    common.Hash
	ElectionId       *big.Int
	Timestamp        *big.Int
	VoteId           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterVoteCast is a free log retrieval operation binding the contract event 0xdf9dbd71c12ac0ec889f1cad7d0e15a26cc5765f926d01d606c0eb683a161d7d.
//
// Solidity: event VoteCast(bytes32 indexed verificationHash, string indexed pollingUnitId, uint256 indexed electionId, uint256 timestamp, uint256 voteId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterVoteCast(opts *bind.FilterOpts, verificationHash [][32]byte, pollingUnitId []string, electionId []*big.Int) (*SecureVotingSystemVoteCastIterator, error) {

	var verificationHashRule []interface{}
	for _, verificationHashItem := range verificationHash {
		verificationHashRule = append(verificationHashRule, verificationHashItem)
	}
	var pollingUnitIdRule []interface{}
	for _, pollingUnitIdItem := range pollingUnitId {
		pollingUnitIdRule = append(pollingUnitIdRule, pollingUnitIdItem)
	}
	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "VoteCast", verificationHashRule, pollingUnitIdRule, electionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemVoteCastIterator{contract: _SecureVotingSystem.contract, event: "VoteCast", logs: logs, sub: sub}, nil
}

// WatchVoteCast is a free log subscription operation binding the contract event 0xdf9dbd71c12ac0ec889f1cad7d0e15a26cc5765f926d01d606c0eb683a161d7d.
//
// Solidity: event VoteCast(bytes32 indexed verificationHash, string indexed pollingUnitId, uint256 indexed electionId, uint256 timestamp, uint256 voteId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchVoteCast(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemVoteCast, verificationHash [][32]byte, pollingUnitId []string, electionId []*big.Int) (event.Subscription, error) {

	var verificationHashRule []interface{}
	for _, verificationHashItem := range verificationHash {
		verificationHashRule = append(verificationHashRule, verificationHashItem)
	}
	var pollingUnitIdRule []interface{}
	for _, pollingUnitIdItem := range pollingUnitId {
		pollingUnitIdRule = append(pollingUnitIdRule, pollingUnitIdItem)
	}
	var electionIdRule []interface{}
	for _, electionIdItem := range electionId {
		electionIdRule = append(electionIdRule, electionIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "VoteCast", verificationHashRule, pollingUnitIdRule, electionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemVoteCast)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "VoteCast", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteCast is a log parse operation binding the contract event 0xdf9dbd71c12ac0ec889f1cad7d0e15a26cc5765f926d01d606c0eb683a161d7d.
//
// Solidity: event VoteCast(bytes32 indexed verificationHash, string indexed pollingUnitId, uint256 indexed electionId, uint256 timestamp, uint256 voteId)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseVoteCast(log types.Log) (*SecureVotingSystemVoteCast, error) {
	event := new(SecureVotingSystemVoteCast)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "VoteCast", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecureVotingSystemVoteInvalidatedIterator is returned from FilterVoteInvalidated and is used to iterate over the raw logs and unpacked data for VoteInvalidated events raised by the SecureVotingSystem contract.
type SecureVotingSystemVoteInvalidatedIterator struct {
	Event *SecureVotingSystemVoteInvalidated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecureVotingSystemVoteInvalidatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecureVotingSystemVoteInvalidated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecureVotingSystemVoteInvalidated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecureVotingSystemVoteInvalidatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecureVotingSystemVoteInvalidatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecureVotingSystemVoteInvalidated represents a VoteInvalidated event raised by the SecureVotingSystem contract.
type SecureVotingSystemVoteInvalidated struct {
	VoteId *big.Int
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVoteInvalidated is a free log retrieval operation binding the contract event 0x135777869117aa60ca380541543f5506294b4330cef23c24067a9bd0bb1f0ff4.
//
// Solidity: event VoteInvalidated(uint256 indexed voteId, string reason)
func (_SecureVotingSystem *SecureVotingSystemFilterer) FilterVoteInvalidated(opts *bind.FilterOpts, voteId []*big.Int) (*SecureVotingSystemVoteInvalidatedIterator, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.FilterLogs(opts, "VoteInvalidated", voteIdRule)
	if err != nil {
		return nil, err
	}
	return &SecureVotingSystemVoteInvalidatedIterator{contract: _SecureVotingSystem.contract, event: "VoteInvalidated", logs: logs, sub: sub}, nil
}

// WatchVoteInvalidated is a free log subscription operation binding the contract event 0x135777869117aa60ca380541543f5506294b4330cef23c24067a9bd0bb1f0ff4.
//
// Solidity: event VoteInvalidated(uint256 indexed voteId, string reason)
func (_SecureVotingSystem *SecureVotingSystemFilterer) WatchVoteInvalidated(opts *bind.WatchOpts, sink chan<- *SecureVotingSystemVoteInvalidated, voteId []*big.Int) (event.Subscription, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}

	logs, sub, err := _SecureVotingSystem.contract.WatchLogs(opts, "VoteInvalidated", voteIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecureVotingSystemVoteInvalidated)
				if err := _SecureVotingSystem.contract.UnpackLog(event, "VoteInvalidated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteInvalidated is a log parse operation binding the contract event 0x135777869117aa60ca380541543f5506294b4330cef23c24067a9bd0bb1f0ff4.
//
// Solidity: event VoteInvalidated(uint256 indexed voteId, string reason)
func (_SecureVotingSystem *SecureVotingSystemFilterer) ParseVoteInvalidated(log types.Log) (*SecureVotingSystemVoteInvalidated, error) {
	event := new(SecureVotingSystemVoteInvalidated)
	if err := _SecureVotingSystem.contract.UnpackLog(event, "VoteInvalidated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
